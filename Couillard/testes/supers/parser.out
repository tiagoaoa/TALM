shift/reduce conflict in state 23 resolved as shift.
shift/reduce conflict in state 42 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.
shift/reduce conflict in state 101 resolved as shift.


Unused terminals:

   ENUM
   ARROW
   SIZEOF
   UNION
   GOTO
   QUESTION
   TIMES
   POUND
   STRUCT

Grammar

Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     external_declaration -> block_statement
Rule 6     function_definition -> declaration_specifiers declarator compound_statement
Rule 7     function_definition -> declarator compound_statement
Rule 8     declaration_specifiers -> storage_class_specifier
Rule 9     declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 10    declaration_specifiers -> type_specifier
Rule 11    declaration_specifiers -> type_specifier declaration_specifiers
Rule 12    declaration_specifiers -> type_qualifier
Rule 13    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 14    type_specifier -> VOID
Rule 15    type_specifier -> CHAR
Rule 16    type_specifier -> INT
Rule 17    type_specifier -> FLOAT
Rule 18    type_specifier -> DOUBLE
Rule 19    type_specifier -> SHORT
Rule 20    type_specifier -> LONG
Rule 21    type_specifier -> SIGNED
Rule 22    type_specifier -> UNSIGNED
Rule 23    storage_class_specifier -> TYPEDEF
Rule 24    storage_class_specifier -> EXTERN
Rule 25    storage_class_specifier -> STATIC
Rule 26    storage_class_specifier -> AUTO
Rule 27    storage_class_specifier -> REGISTER
Rule 28    storage_class_specifier -> TREB_PAROUT
Rule 29    type_qualifier -> CONST
Rule 30    type_qualifier -> VOLATILE
Rule 31    type_qualifier_list -> type_qualifier
Rule 32    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 33    declarator -> direct_declarator
Rule 34    declarator -> pointer declarator
Rule 35    pointer -> ASTERISK
Rule 36    pointer -> ASTERISK type_qualifier_list
Rule 37    pointer -> ASTERISK pointer
Rule 38    pointer -> ASTERISK type_qualifier_list pointer
Rule 39    declaration_list -> declaration
Rule 40    declaration_list -> declaration_list declaration
Rule 41    declaration -> declaration_specifiers SEMICOLON
Rule 42    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 43    init_declarator_list -> init_declarator
Rule 44    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 45    init_declarator -> declarator
Rule 46    init_declarator -> declarator ASSIGN initializer
Rule 47    initializer -> assignment_expression
Rule 48    initializer -> LBRACE initializer_list RBRACE
Rule 49    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 50    initializer_list -> initializer
Rule 51    initializer_list -> initializer_list COMMA initializer
Rule 52    compound_statement -> LBRACE RBRACE
Rule 53    compound_statement -> LBRACE statement_list RBRACE
Rule 54    compound_statement -> LBRACE declaration_list RBRACE
Rule 55    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 56    statement_list -> statement
Rule 57    statement_list -> statement_list statement
Rule 58    statement -> labeled_statement
Rule 59    statement -> super_statement
Rule 60    statement -> compound_statement
Rule 61    statement -> expression_statement
Rule 62    statement -> selection_statement
Rule 63    statement -> iteration_statement
Rule 64    statement -> jump_statement
Rule 65    labeled_statement -> CASE constant_expression COLON statement
Rule 66    labeled_statement -> DEFAULT COLON statement
Rule 67    expression_statement -> SEMICOLON
Rule 68    expression_statement -> expression SEMICOLON
Rule 69    selection_statement -> IF LPAREN expression RPAREN statement
Rule 70    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 71    selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 72    jump_statement -> RETURN SEMICOLON
Rule 73    jump_statement -> RETURN expression SEMICOLON
Rule 74    jump_statement -> BREAK SEMICOLON
Rule 75    jump_statement -> CONTINUE SEMICOLON
Rule 76    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 77    iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement
Rule 78    iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement
Rule 79    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 80    expression -> assignment_expression
Rule 81    expression -> expression COMMA assignment_expression
Rule 82    assignment_expression -> conditional_expression
Rule 83    assignment_expression -> unary_expression ASSIGN assignment_expression
Rule 84    assignment_expression -> unary_expression EQ_PLUS assignment_expression
Rule 85    assignment_expression -> unary_expression EQ_MINUS assignment_expression
Rule 86    assignment_expression -> unary_expression EQ_TIMES assignment_expression
Rule 87    assignment_expression -> unary_expression EQ_DIV assignment_expression
Rule 88    assignment_expression -> unary_expression EQ_MODULO assignment_expression
Rule 89    assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression
Rule 90    assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression
Rule 91    assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression
Rule 92    assignment_expression -> unary_expression EQ_CARET assignment_expression
Rule 93    assignment_expression -> unary_expression EQ_PIPE assignment_expression
Rule 94    constant_expression -> conditional_expression
Rule 95    conditional_expression -> logical_or_expression
Rule 96    logical_or_expression -> logical_and_expression
Rule 97    logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression
Rule 98    logical_and_expression -> inclusive_or_expression
Rule 99    logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
Rule 100   inclusive_or_expression -> exclusive_or_expression
Rule 101   inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression
Rule 102   exclusive_or_expression -> and_expression
Rule 103   exclusive_or_expression -> exclusive_or_expression CARET and_expression
Rule 104   and_expression -> equality_expression
Rule 105   and_expression -> and_expression AMPERSAND equality_expression
Rule 106   equality_expression -> relational_expression
Rule 107   equality_expression -> equality_expression EQ relational_expression
Rule 108   equality_expression -> equality_expression NOT_EQ relational_expression
Rule 109   relational_expression -> shift_expression
Rule 110   relational_expression -> relational_expression LESS shift_expression
Rule 111   relational_expression -> relational_expression GREATER shift_expression
Rule 112   relational_expression -> relational_expression LESS_EQ shift_expression
Rule 113   relational_expression -> relational_expression GREATER_EQ shift_expression
Rule 114   shift_expression -> additive_expression
Rule 115   shift_expression -> shift_expression SHIFT_LEFT additive_expression
Rule 116   shift_expression -> shift_expression SHIFT_RIGHT additive_expression
Rule 117   additive_expression -> mult_expression
Rule 118   additive_expression -> additive_expression PLUS mult_expression
Rule 119   additive_expression -> additive_expression MINUS mult_expression
Rule 120   mult_expression -> cast_expression
Rule 121   mult_expression -> mult_expression ASTERISK cast_expression
Rule 122   mult_expression -> mult_expression DIV cast_expression
Rule 123   mult_expression -> mult_expression MODULO cast_expression
Rule 124   cast_expression -> unary_expression
Rule 125   unary_expression -> postfix_expression
Rule 126   unary_expression -> DOUBLE_PLUS unary_expression
Rule 127   unary_expression -> DOUBLE_MINUS unary_expression
Rule 128   unary_expression -> AMPERSAND cast_expression
Rule 129   unary_expression -> ASTERISK cast_expression
Rule 130   unary_expression -> PLUS cast_expression
Rule 131   unary_expression -> MINUS cast_expression
Rule 132   unary_expression -> TILDE cast_expression
Rule 133   unary_expression -> EXCLAMATION cast_expression
Rule 134   postfix_expression -> primary_expression
Rule 135   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 136   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 137   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 138   postfix_expression -> postfix_expression DOUBLE_PLUS
Rule 139   postfix_expression -> postfix_expression DOUBLE_MINUS
Rule 140   primary_expression -> ID
Rule 141   primary_expression -> INUMBER
Rule 142   primary_expression -> FNUMBER
Rule 143   primary_expression -> CHARACTER
Rule 144   primary_expression -> string_literal
Rule 145   primary_expression -> LPAREN expression RPAREN
Rule 146   string_literal -> STRING
Rule 147   string_literal -> string_literal STRING
Rule 148   direct_declarator -> ID
Rule 149   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 150   direct_declarator -> direct_declarator LPAREN RPAREN
Rule 151   direct_declarator -> LPAREN declarator RPAREN
Rule 152   direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET
Rule 153   direct_declarator -> direct_declarator LBRACKET RBRACKET
Rule 154   parameter_type_list -> parameter_list
Rule 155   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 156   parameter_list -> parameter_declaration
Rule 157   parameter_list -> parameter_list COMMA parameter_declaration
Rule 158   parameter_declaration -> declaration_specifiers declarator
Rule 159   parameter_declaration -> declaration_specifiers
Rule 160   argument_expression_list -> assignment_expression
Rule 161   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 162   super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
Rule 163   super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
Rule 164   super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
Rule 165   super_output_list -> ID
Rule 166   super_output_list -> super_output_list COMMA ID
Rule 167   super_input_list -> parout_expression
Rule 168   super_input_list -> super_input_list COMMA parout_expression
Rule 169   parout_expression -> super_input_id COLON COLON INUMBER
Rule 170   parout_expression -> super_input_id COLON COLON ASTERISK
Rule 171   parout_expression -> super_input_id COLON COLON MYTID
Rule 172   parout_expression -> super_input_id
Rule 173   parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
Rule 174   parout_expression -> super_input_id COLON COLON LASTTID
Rule 175   mytid_op -> PLUS
Rule 176   mytid_op -> MINUS
Rule 177   super_input_id -> ID
Rule 178   super_input_id -> LOCAL DOT ID
Rule 179   super_input_id -> STARTER DOT ID
Rule 180   block_statement -> BLOCK

Terminals, with rules where they appear

AMPERSAND            : 105 128
ARROW                : 
ASSIGN               : 46 83
ASTERISK             : 35 36 37 38 121 129 170
AUTO                 : 26
BLOCK                : 180
BREAK                : 74
CARET                : 103
CASE                 : 65
CHAR                 : 15
CHARACTER            : 143
COLON                : 65 66 169 169 170 170 171 171 173 173 174 174
COMMA                : 44 49 51 81 155 157 161 166 168
CONST                : 29
CONTINUE             : 75
DEFAULT              : 66
DIV                  : 122
DO                   : 79
DOT                  : 178 179
DOUBLE               : 18
DOUBLE_AMPERSAND     : 99
DOUBLE_MINUS         : 127 139
DOUBLE_PIPE          : 97
DOUBLE_PLUS          : 126 138
ELLIPSIS             : 155
ELSE                 : 70
ENUM                 : 
EQ                   : 107
EQ_AMPERSAND         : 91
EQ_CARET             : 92
EQ_DIV               : 87
EQ_MINUS             : 85
EQ_MODULO            : 88
EQ_PIPE              : 93
EQ_PLUS              : 84
EQ_SHIFT_LEFT        : 89
EQ_SHIFT_RIGHT       : 90
EQ_TIMES             : 86
EXCLAMATION          : 133
EXTERN               : 24
FLOAT                : 17
FNUMBER              : 142
FOR                  : 77 78
GOTO                 : 
GREATER              : 111
GREATER_EQ           : 113
ID                   : 140 148 165 166 177 178 179
IF                   : 69 70
INPUT                : 162 163 164
INT                  : 16
INUMBER              : 141 169 173
LASTTID              : 174
LBRACE               : 48 49 52 53 54 55
LBRACKET             : 137 152 153
LESS                 : 110
LESS_EQ              : 112
LOCAL                : 178
LONG                 : 20
LPAREN               : 69 70 71 76 77 78 79 135 136 145 149 150 151 162 162 163 163 164 164 173
MINUS                : 119 131 176
MODULO               : 123
MYTID                : 171 173
NOT_EQ               : 108
OUTPUT               : 162 163 164
PARALLEL             : 163
PIPE                 : 101
PLUS                 : 118 130 175
POUND                : 
QUESTION             : 
RBRACE               : 48 49 52 53 54 55
RBRACKET             : 137 152 153
REDUCE               : 164
REGISTER             : 27
RETURN               : 72 73
RPAREN               : 69 70 71 76 77 78 79 135 136 145 149 150 151 162 162 163 163 164 164 173
SEMICOLON            : 41 42 67 68 72 73 74 75 79
SHIFT_LEFT           : 115
SHIFT_RIGHT          : 116
SHORT                : 19
SIGNED               : 21
SINGLE               : 162
SIZEOF               : 
STARTER              : 179
STATIC               : 25
STRING               : 146 147
STRUCT               : 
SUPERBODY            : 162 163 164
SWITCH               : 71
TILDE                : 132
TIMES                : 
TREB_PAROUT          : 28
TREB_SUPER           : 162 163 164
TYPEDEF              : 23
UNION                : 
UNSIGNED             : 22
VOID                 : 14
VOLATILE             : 30
WHILE                : 76 79
error                : 

Nonterminals, with rules where they appear

additive_expression  : 114 115 116 118 119
and_expression       : 102 103 105
argument_expression_list : 135 161
assignment_expression : 47 80 81 83 84 85 86 87 88 89 90 91 92 93 160 161
block_statement      : 5
cast_expression      : 120 121 122 123 128 129 130 131 132 133
compound_statement   : 6 7 60
conditional_expression : 82 94
constant_expression  : 65 152
declaration          : 4 39 40
declaration_list     : 40 54 55
declaration_specifiers : 6 9 11 13 41 42 158 159
declarator           : 6 7 34 45 46 151 158
direct_declarator    : 33 149 150 152 153
equality_expression  : 104 105 107 108
exclusive_or_expression : 100 101 103
expression           : 68 69 70 71 73 76 77 79 81 137 145
expression_statement : 61 77 77 78 78
external_declaration : 1 2
function_definition  : 3
inclusive_or_expression : 98 99 101
init_declarator      : 43 44
init_declarator_list : 42 44
initializer          : 46 50 51
initializer_list     : 48 49 51
iteration_statement  : 63
jump_statement       : 64
labeled_statement    : 58
logical_and_expression : 96 97 99
logical_or_expression : 95 97
mult_expression      : 117 118 119 121 122 123
mytid_op             : 173
parameter_declaration : 156 157
parameter_list       : 154 155 157
parameter_type_list  : 149
parout_expression    : 167 168
pointer              : 34 37 38
postfix_expression   : 125 135 136 137 138 139
primary_expression   : 134
relational_expression : 106 107 108 110 111 112 113
selection_statement  : 62
shift_expression     : 109 110 111 112 113 115 116
statement            : 56 57 65 66 69 70 70 71 76 77 78 79
statement_list       : 53 55 57
storage_class_specifier : 8 9
string_literal       : 144 147
super_input_id       : 169 170 171 172 173 174
super_input_list     : 162 163 164 168
super_output_list    : 162 163 164 166
super_statement      : 59
translation_unit     : 2 0
type_qualifier       : 12 13 31 32
type_qualifier_list  : 32 36 38
type_specifier       : 10 11
unary_expression     : 83 84 85 86 87 88 89 90 91 92 93 124 126 127


Parsing method: SLR


state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . block_statement
    (6) function_definition -> . declaration_specifiers declarator compound_statement
    (7) function_definition -> . declarator compound_statement
    (41) declaration -> . declaration_specifiers SEMICOLON
    (42) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (180) block_statement -> . BLOCK
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    BLOCK           shift and go to state 13
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32
    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    external_declaration shift and go to state 14
    storage_class_specifier shift and go to state 1
    type_qualifier  shift and go to state 30
    function_definition shift and go to state 27
    direct_declarator shift and go to state 22
    declarator      shift and go to state 33
    block_statement shift and go to state 18
    type_specifier  shift and go to state 15
    declaration_specifiers shift and go to state 24
    declaration     shift and go to state 25
    pointer         shift and go to state 12
    translation_unit shift and go to state 19

state 1

    (8) declaration_specifiers -> storage_class_specifier .
    (9) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

    ID              reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    LPAREN          reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    ASTERISK        reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    SEMICOLON       reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    RPAREN          reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 8 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32


    storage_class_specifier shift and go to state 1
    type_specifier  shift and go to state 15
    declaration_specifiers shift and go to state 34
    type_qualifier  shift and go to state 30

state 2

    (28) storage_class_specifier -> TREB_PAROUT .

    ID              reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    LPAREN          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    ASTERISK        reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    TYPEDEF         reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    EXTERN          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    STATIC          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    AUTO            reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    REGISTER        reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    TREB_PAROUT     reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    VOID            reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    CHAR            reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    INT             reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    FLOAT           reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    DOUBLE          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    SHORT           reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    LONG            reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    SIGNED          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    UNSIGNED        reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    CONST           reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    VOLATILE        reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    SEMICOLON       reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    RPAREN          reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)
    COMMA           reduce using rule 28 (storage_class_specifier -> TREB_PAROUT .)



state 3

    (17) type_specifier -> FLOAT .

    ID              reduce using rule 17 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 17 (type_specifier -> FLOAT .)
    ASTERISK        reduce using rule 17 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 17 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 17 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 17 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 17 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 17 (type_specifier -> FLOAT .)
    TREB_PAROUT     reduce using rule 17 (type_specifier -> FLOAT .)
    VOID            reduce using rule 17 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 17 (type_specifier -> FLOAT .)
    INT             reduce using rule 17 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 17 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 17 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 17 (type_specifier -> FLOAT .)
    LONG            reduce using rule 17 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 17 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 17 (type_specifier -> FLOAT .)
    CONST           reduce using rule 17 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 17 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 17 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 17 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 17 (type_specifier -> FLOAT .)



state 4

    (29) type_qualifier -> CONST .

    ID              reduce using rule 29 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 29 (type_qualifier -> CONST .)
    ASTERISK        reduce using rule 29 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 29 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 29 (type_qualifier -> CONST .)
    STATIC          reduce using rule 29 (type_qualifier -> CONST .)
    AUTO            reduce using rule 29 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 29 (type_qualifier -> CONST .)
    TREB_PAROUT     reduce using rule 29 (type_qualifier -> CONST .)
    VOID            reduce using rule 29 (type_qualifier -> CONST .)
    CHAR            reduce using rule 29 (type_qualifier -> CONST .)
    INT             reduce using rule 29 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 29 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 29 (type_qualifier -> CONST .)
    SHORT           reduce using rule 29 (type_qualifier -> CONST .)
    LONG            reduce using rule 29 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 29 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 29 (type_qualifier -> CONST .)
    CONST           reduce using rule 29 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 29 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 29 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 29 (type_qualifier -> CONST .)
    COMMA           reduce using rule 29 (type_qualifier -> CONST .)



state 5

    (151) direct_declarator -> LPAREN . declarator RPAREN
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    declarator      shift and go to state 35
    pointer         shift and go to state 12

state 6

    (14) type_specifier -> VOID .

    ID              reduce using rule 14 (type_specifier -> VOID .)
    LPAREN          reduce using rule 14 (type_specifier -> VOID .)
    ASTERISK        reduce using rule 14 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 14 (type_specifier -> VOID .)
    EXTERN          reduce using rule 14 (type_specifier -> VOID .)
    STATIC          reduce using rule 14 (type_specifier -> VOID .)
    AUTO            reduce using rule 14 (type_specifier -> VOID .)
    REGISTER        reduce using rule 14 (type_specifier -> VOID .)
    TREB_PAROUT     reduce using rule 14 (type_specifier -> VOID .)
    VOID            reduce using rule 14 (type_specifier -> VOID .)
    CHAR            reduce using rule 14 (type_specifier -> VOID .)
    INT             reduce using rule 14 (type_specifier -> VOID .)
    FLOAT           reduce using rule 14 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 14 (type_specifier -> VOID .)
    SHORT           reduce using rule 14 (type_specifier -> VOID .)
    LONG            reduce using rule 14 (type_specifier -> VOID .)
    SIGNED          reduce using rule 14 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 14 (type_specifier -> VOID .)
    CONST           reduce using rule 14 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 14 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 14 (type_specifier -> VOID .)
    RPAREN          reduce using rule 14 (type_specifier -> VOID .)
    COMMA           reduce using rule 14 (type_specifier -> VOID .)



state 7

    (15) type_specifier -> CHAR .

    ID              reduce using rule 15 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 15 (type_specifier -> CHAR .)
    ASTERISK        reduce using rule 15 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 15 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 15 (type_specifier -> CHAR .)
    STATIC          reduce using rule 15 (type_specifier -> CHAR .)
    AUTO            reduce using rule 15 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 15 (type_specifier -> CHAR .)
    TREB_PAROUT     reduce using rule 15 (type_specifier -> CHAR .)
    VOID            reduce using rule 15 (type_specifier -> CHAR .)
    CHAR            reduce using rule 15 (type_specifier -> CHAR .)
    INT             reduce using rule 15 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 15 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 15 (type_specifier -> CHAR .)
    SHORT           reduce using rule 15 (type_specifier -> CHAR .)
    LONG            reduce using rule 15 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 15 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 15 (type_specifier -> CHAR .)
    CONST           reduce using rule 15 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 15 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 15 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 15 (type_specifier -> CHAR .)
    COMMA           reduce using rule 15 (type_specifier -> CHAR .)



state 8

    (19) type_specifier -> SHORT .

    ID              reduce using rule 19 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 19 (type_specifier -> SHORT .)
    ASTERISK        reduce using rule 19 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 19 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 19 (type_specifier -> SHORT .)
    STATIC          reduce using rule 19 (type_specifier -> SHORT .)
    AUTO            reduce using rule 19 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 19 (type_specifier -> SHORT .)
    TREB_PAROUT     reduce using rule 19 (type_specifier -> SHORT .)
    VOID            reduce using rule 19 (type_specifier -> SHORT .)
    CHAR            reduce using rule 19 (type_specifier -> SHORT .)
    INT             reduce using rule 19 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 19 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 19 (type_specifier -> SHORT .)
    SHORT           reduce using rule 19 (type_specifier -> SHORT .)
    LONG            reduce using rule 19 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 19 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 19 (type_specifier -> SHORT .)
    CONST           reduce using rule 19 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 19 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 19 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 19 (type_specifier -> SHORT .)
    COMMA           reduce using rule 19 (type_specifier -> SHORT .)



state 9

    (25) storage_class_specifier -> STATIC .

    ID              reduce using rule 25 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 25 (storage_class_specifier -> STATIC .)
    ASTERISK        reduce using rule 25 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 25 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 25 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 25 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 25 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 25 (storage_class_specifier -> STATIC .)
    TREB_PAROUT     reduce using rule 25 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 25 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 25 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 25 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 25 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 25 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 25 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 25 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 25 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 25 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 25 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 25 (storage_class_specifier -> STATIC .)
    SEMICOLON       reduce using rule 25 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 25 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 25 (storage_class_specifier -> STATIC .)



state 10

    (20) type_specifier -> LONG .

    ID              reduce using rule 20 (type_specifier -> LONG .)
    LPAREN          reduce using rule 20 (type_specifier -> LONG .)
    ASTERISK        reduce using rule 20 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 20 (type_specifier -> LONG .)
    EXTERN          reduce using rule 20 (type_specifier -> LONG .)
    STATIC          reduce using rule 20 (type_specifier -> LONG .)
    AUTO            reduce using rule 20 (type_specifier -> LONG .)
    REGISTER        reduce using rule 20 (type_specifier -> LONG .)
    TREB_PAROUT     reduce using rule 20 (type_specifier -> LONG .)
    VOID            reduce using rule 20 (type_specifier -> LONG .)
    CHAR            reduce using rule 20 (type_specifier -> LONG .)
    INT             reduce using rule 20 (type_specifier -> LONG .)
    FLOAT           reduce using rule 20 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 20 (type_specifier -> LONG .)
    SHORT           reduce using rule 20 (type_specifier -> LONG .)
    LONG            reduce using rule 20 (type_specifier -> LONG .)
    SIGNED          reduce using rule 20 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 20 (type_specifier -> LONG .)
    CONST           reduce using rule 20 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 20 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 20 (type_specifier -> LONG .)
    RPAREN          reduce using rule 20 (type_specifier -> LONG .)
    COMMA           reduce using rule 20 (type_specifier -> LONG .)



state 11

    (24) storage_class_specifier -> EXTERN .

    ID              reduce using rule 24 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    ASTERISK        reduce using rule 24 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 24 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 24 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 24 (storage_class_specifier -> EXTERN .)
    TREB_PAROUT     reduce using rule 24 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 24 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 24 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 24 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 24 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 24 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 24 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 24 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 24 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 24 (storage_class_specifier -> EXTERN .)
    SEMICOLON       reduce using rule 24 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 24 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 24 (storage_class_specifier -> EXTERN .)



state 12

    (34) declarator -> pointer . declarator
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    declarator      shift and go to state 36
    pointer         shift and go to state 12

state 13

    (180) block_statement -> BLOCK .

    $               reduce using rule 180 (block_statement -> BLOCK .)
    TYPEDEF         reduce using rule 180 (block_statement -> BLOCK .)
    EXTERN          reduce using rule 180 (block_statement -> BLOCK .)
    STATIC          reduce using rule 180 (block_statement -> BLOCK .)
    AUTO            reduce using rule 180 (block_statement -> BLOCK .)
    REGISTER        reduce using rule 180 (block_statement -> BLOCK .)
    TREB_PAROUT     reduce using rule 180 (block_statement -> BLOCK .)
    VOID            reduce using rule 180 (block_statement -> BLOCK .)
    CHAR            reduce using rule 180 (block_statement -> BLOCK .)
    INT             reduce using rule 180 (block_statement -> BLOCK .)
    FLOAT           reduce using rule 180 (block_statement -> BLOCK .)
    DOUBLE          reduce using rule 180 (block_statement -> BLOCK .)
    SHORT           reduce using rule 180 (block_statement -> BLOCK .)
    LONG            reduce using rule 180 (block_statement -> BLOCK .)
    SIGNED          reduce using rule 180 (block_statement -> BLOCK .)
    UNSIGNED        reduce using rule 180 (block_statement -> BLOCK .)
    ID              reduce using rule 180 (block_statement -> BLOCK .)
    LPAREN          reduce using rule 180 (block_statement -> BLOCK .)
    ASTERISK        reduce using rule 180 (block_statement -> BLOCK .)
    BLOCK           reduce using rule 180 (block_statement -> BLOCK .)
    CONST           reduce using rule 180 (block_statement -> BLOCK .)
    VOLATILE        reduce using rule 180 (block_statement -> BLOCK .)



state 14

    (1) translation_unit -> external_declaration .

    $               reduce using rule 1 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    TREB_PAROUT     reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ASTERISK        reduce using rule 1 (translation_unit -> external_declaration .)
    BLOCK           reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)



state 15

    (10) declaration_specifiers -> type_specifier .
    (11) declaration_specifiers -> type_specifier . declaration_specifiers
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

    ID              reduce using rule 10 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 10 (declaration_specifiers -> type_specifier .)
    ASTERISK        reduce using rule 10 (declaration_specifiers -> type_specifier .)
    SEMICOLON       reduce using rule 10 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 10 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 10 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32


    storage_class_specifier shift and go to state 1
    type_specifier  shift and go to state 15
    declaration_specifiers shift and go to state 37
    type_qualifier  shift and go to state 30

state 16

    (27) storage_class_specifier -> REGISTER .

    ID              reduce using rule 27 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    ASTERISK        reduce using rule 27 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 27 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 27 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 27 (storage_class_specifier -> REGISTER .)
    TREB_PAROUT     reduce using rule 27 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 27 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 27 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 27 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 27 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 27 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 27 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 27 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 27 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 27 (storage_class_specifier -> REGISTER .)
    SEMICOLON       reduce using rule 27 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 27 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 27 (storage_class_specifier -> REGISTER .)



state 17

    (22) type_specifier -> UNSIGNED .

    ID              reduce using rule 22 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 22 (type_specifier -> UNSIGNED .)
    ASTERISK        reduce using rule 22 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 22 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 22 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 22 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 22 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 22 (type_specifier -> UNSIGNED .)
    TREB_PAROUT     reduce using rule 22 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 22 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 22 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 22 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 22 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 22 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 22 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 22 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 22 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 22 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 22 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 22 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 22 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 22 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 22 (type_specifier -> UNSIGNED .)



state 18

    (5) external_declaration -> block_statement .

    $               reduce using rule 5 (external_declaration -> block_statement .)
    TYPEDEF         reduce using rule 5 (external_declaration -> block_statement .)
    EXTERN          reduce using rule 5 (external_declaration -> block_statement .)
    STATIC          reduce using rule 5 (external_declaration -> block_statement .)
    AUTO            reduce using rule 5 (external_declaration -> block_statement .)
    REGISTER        reduce using rule 5 (external_declaration -> block_statement .)
    TREB_PAROUT     reduce using rule 5 (external_declaration -> block_statement .)
    VOID            reduce using rule 5 (external_declaration -> block_statement .)
    CHAR            reduce using rule 5 (external_declaration -> block_statement .)
    INT             reduce using rule 5 (external_declaration -> block_statement .)
    FLOAT           reduce using rule 5 (external_declaration -> block_statement .)
    DOUBLE          reduce using rule 5 (external_declaration -> block_statement .)
    SHORT           reduce using rule 5 (external_declaration -> block_statement .)
    LONG            reduce using rule 5 (external_declaration -> block_statement .)
    SIGNED          reduce using rule 5 (external_declaration -> block_statement .)
    UNSIGNED        reduce using rule 5 (external_declaration -> block_statement .)
    ID              reduce using rule 5 (external_declaration -> block_statement .)
    LPAREN          reduce using rule 5 (external_declaration -> block_statement .)
    ASTERISK        reduce using rule 5 (external_declaration -> block_statement .)
    BLOCK           reduce using rule 5 (external_declaration -> block_statement .)
    CONST           reduce using rule 5 (external_declaration -> block_statement .)
    VOLATILE        reduce using rule 5 (external_declaration -> block_statement .)



state 19

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (5) external_declaration -> . block_statement
    (6) function_definition -> . declaration_specifiers declarator compound_statement
    (7) function_definition -> . declarator compound_statement
    (41) declaration -> . declaration_specifiers SEMICOLON
    (42) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (180) block_statement -> . BLOCK
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    BLOCK           shift and go to state 13
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32
    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    external_declaration shift and go to state 38
    storage_class_specifier shift and go to state 1
    type_qualifier  shift and go to state 30
    function_definition shift and go to state 27
    direct_declarator shift and go to state 22
    declarator      shift and go to state 33
    block_statement shift and go to state 18
    type_specifier  shift and go to state 15
    declaration_specifiers shift and go to state 24
    declaration     shift and go to state 25
    pointer         shift and go to state 12

state 20

    (23) storage_class_specifier -> TYPEDEF .

    ID              reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    ASTERISK        reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    TREB_PAROUT     reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 23 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 23 (storage_class_specifier -> TYPEDEF .)



state 21

    (26) storage_class_specifier -> AUTO .

    ID              reduce using rule 26 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 26 (storage_class_specifier -> AUTO .)
    ASTERISK        reduce using rule 26 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 26 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 26 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 26 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 26 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 26 (storage_class_specifier -> AUTO .)
    TREB_PAROUT     reduce using rule 26 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 26 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 26 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 26 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 26 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 26 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 26 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 26 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 26 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 26 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 26 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 26 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 26 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 26 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 26 (storage_class_specifier -> AUTO .)



state 22

    (33) declarator -> direct_declarator .
    (149) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> direct_declarator . LPAREN RPAREN
    (152) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> direct_declarator . LBRACKET RBRACKET

    LBRACE          reduce using rule 33 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 33 (declarator -> direct_declarator .)
    COMMA           reduce using rule 33 (declarator -> direct_declarator .)
    ASSIGN          reduce using rule 33 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 33 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 40
    LBRACKET        shift and go to state 39

  ! LPAREN          [ shift and go to state 40 ]
  ! LBRACKET        [ shift and go to state 39 ]


state 23

    (35) pointer -> ASTERISK .
    (36) pointer -> ASTERISK . type_qualifier_list
    (37) pointer -> ASTERISK . pointer
    (38) pointer -> ASTERISK . type_qualifier_list pointer
    (31) type_qualifier_list -> . type_qualifier
    (32) type_qualifier_list -> . type_qualifier_list type_qualifier
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

  ! shift/reduce conflict for ASTERISK resolved as shift.
    ID              reduce using rule 35 (pointer -> ASTERISK .)
    LPAREN          reduce using rule 35 (pointer -> ASTERISK .)
    ASTERISK        shift and go to state 23
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32

  ! ASTERISK        [ reduce using rule 35 (pointer -> ASTERISK .) ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    type_qualifier_list shift and go to state 42
    pointer         shift and go to state 43
    type_qualifier  shift and go to state 41

state 24

    (6) function_definition -> declaration_specifiers . declarator compound_statement
    (41) declaration -> declaration_specifiers . SEMICOLON
    (42) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (43) init_declarator_list -> . init_declarator
    (44) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer
    (45) init_declarator -> . declarator
    (46) init_declarator -> . declarator ASSIGN initializer

    SEMICOLON       shift and go to state 44
    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    init_declarator shift and go to state 45
    init_declarator_list shift and go to state 46
    declarator      shift and go to state 47
    pointer         shift and go to state 12

state 25

    (4) external_declaration -> declaration .

    $               reduce using rule 4 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    AUTO            reduce using rule 4 (external_declaration -> declaration .)
    REGISTER        reduce using rule 4 (external_declaration -> declaration .)
    TREB_PAROUT     reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    ID              reduce using rule 4 (external_declaration -> declaration .)
    LPAREN          reduce using rule 4 (external_declaration -> declaration .)
    ASTERISK        reduce using rule 4 (external_declaration -> declaration .)
    BLOCK           reduce using rule 4 (external_declaration -> declaration .)
    CONST           reduce using rule 4 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (external_declaration -> declaration .)



state 26

    (148) direct_declarator -> ID .

    LBRACE          reduce using rule 148 (direct_declarator -> ID .)
    LPAREN          reduce using rule 148 (direct_declarator -> ID .)
    LBRACKET        reduce using rule 148 (direct_declarator -> ID .)
    SEMICOLON       reduce using rule 148 (direct_declarator -> ID .)
    COMMA           reduce using rule 148 (direct_declarator -> ID .)
    ASSIGN          reduce using rule 148 (direct_declarator -> ID .)
    RPAREN          reduce using rule 148 (direct_declarator -> ID .)



state 27

    (3) external_declaration -> function_definition .

    $               reduce using rule 3 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    AUTO            reduce using rule 3 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (external_declaration -> function_definition .)
    TREB_PAROUT     reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    ASTERISK        reduce using rule 3 (external_declaration -> function_definition .)
    BLOCK           reduce using rule 3 (external_declaration -> function_definition .)
    CONST           reduce using rule 3 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (external_declaration -> function_definition .)



state 28

    (16) type_specifier -> INT .

    ID              reduce using rule 16 (type_specifier -> INT .)
    LPAREN          reduce using rule 16 (type_specifier -> INT .)
    ASTERISK        reduce using rule 16 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 16 (type_specifier -> INT .)
    EXTERN          reduce using rule 16 (type_specifier -> INT .)
    STATIC          reduce using rule 16 (type_specifier -> INT .)
    AUTO            reduce using rule 16 (type_specifier -> INT .)
    REGISTER        reduce using rule 16 (type_specifier -> INT .)
    TREB_PAROUT     reduce using rule 16 (type_specifier -> INT .)
    VOID            reduce using rule 16 (type_specifier -> INT .)
    CHAR            reduce using rule 16 (type_specifier -> INT .)
    INT             reduce using rule 16 (type_specifier -> INT .)
    FLOAT           reduce using rule 16 (type_specifier -> INT .)
    DOUBLE          reduce using rule 16 (type_specifier -> INT .)
    SHORT           reduce using rule 16 (type_specifier -> INT .)
    LONG            reduce using rule 16 (type_specifier -> INT .)
    SIGNED          reduce using rule 16 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 16 (type_specifier -> INT .)
    CONST           reduce using rule 16 (type_specifier -> INT .)
    VOLATILE        reduce using rule 16 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 16 (type_specifier -> INT .)
    RPAREN          reduce using rule 16 (type_specifier -> INT .)
    COMMA           reduce using rule 16 (type_specifier -> INT .)



state 29

    (18) type_specifier -> DOUBLE .

    ID              reduce using rule 18 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 18 (type_specifier -> DOUBLE .)
    ASTERISK        reduce using rule 18 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 18 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 18 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 18 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 18 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 18 (type_specifier -> DOUBLE .)
    TREB_PAROUT     reduce using rule 18 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 18 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 18 (type_specifier -> DOUBLE .)
    INT             reduce using rule 18 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 18 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 18 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 18 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 18 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 18 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 18 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 18 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 18 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 18 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 18 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 18 (type_specifier -> DOUBLE .)



state 30

    (12) declaration_specifiers -> type_qualifier .
    (13) declaration_specifiers -> type_qualifier . declaration_specifiers
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

    ID              reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    LPAREN          reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    ASTERISK        reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    SEMICOLON       reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    RPAREN          reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 12 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32


    storage_class_specifier shift and go to state 1
    type_qualifier  shift and go to state 30
    type_specifier  shift and go to state 15
    declaration_specifiers shift and go to state 48

state 31

    (21) type_specifier -> SIGNED .

    ID              reduce using rule 21 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 21 (type_specifier -> SIGNED .)
    ASTERISK        reduce using rule 21 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 21 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 21 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 21 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 21 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 21 (type_specifier -> SIGNED .)
    TREB_PAROUT     reduce using rule 21 (type_specifier -> SIGNED .)
    VOID            reduce using rule 21 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 21 (type_specifier -> SIGNED .)
    INT             reduce using rule 21 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 21 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 21 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 21 (type_specifier -> SIGNED .)
    LONG            reduce using rule 21 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 21 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 21 (type_specifier -> SIGNED .)
    CONST           reduce using rule 21 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 21 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 21 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 21 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 21 (type_specifier -> SIGNED .)



state 32

    (30) type_qualifier -> VOLATILE .

    ID              reduce using rule 30 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 30 (type_qualifier -> VOLATILE .)
    ASTERISK        reduce using rule 30 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 30 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 30 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 30 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 30 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 30 (type_qualifier -> VOLATILE .)
    TREB_PAROUT     reduce using rule 30 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 30 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 30 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 30 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 30 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 30 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 30 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 30 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 30 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 30 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 30 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 30 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 30 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 30 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 30 (type_qualifier -> VOLATILE .)



state 33

    (7) function_definition -> declarator . compound_statement
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE

    LBRACE          shift and go to state 49

  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]

    compound_statement shift and go to state 50

state 34

    (9) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    ID              reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    LPAREN          reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ASTERISK        reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    SEMICOLON       reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    RPAREN          reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 9 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)



state 35

    (151) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 51



state 36

    (34) declarator -> pointer declarator .

    LBRACE          reduce using rule 34 (declarator -> pointer declarator .)
    SEMICOLON       reduce using rule 34 (declarator -> pointer declarator .)
    COMMA           reduce using rule 34 (declarator -> pointer declarator .)
    ASSIGN          reduce using rule 34 (declarator -> pointer declarator .)
    RPAREN          reduce using rule 34 (declarator -> pointer declarator .)



state 37

    (11) declaration_specifiers -> type_specifier declaration_specifiers .

    ID              reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)
    LPAREN          reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ASTERISK        reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)
    SEMICOLON       reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)
    RPAREN          reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 11 (declaration_specifiers -> type_specifier declaration_specifiers .)



state 38

    (2) translation_unit -> translation_unit external_declaration .

    $               reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TREB_PAROUT     reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ASTERISK        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BLOCK           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)



state 39

    (152) direct_declarator -> direct_declarator LBRACKET . constant_expression RBRACKET
    (153) direct_declarator -> direct_declarator LBRACKET . RBRACKET
    (94) constant_expression -> . conditional_expression
    (95) conditional_expression -> . logical_or_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    RBRACKET        shift and go to state 82
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    exclusive_or_expression shift and go to state 54
    inclusive_or_expression shift and go to state 59
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    and_expression  shift and go to state 57
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 80
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    constant_expression shift and go to state 68
    relational_expression shift and go to state 64

state 40

    (149) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (150) direct_declarator -> direct_declarator LPAREN . RPAREN
    (154) parameter_type_list -> . parameter_list
    (155) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (156) parameter_list -> . parameter_declaration
    (157) parameter_list -> . parameter_list COMMA parameter_declaration
    (158) parameter_declaration -> . declaration_specifiers declarator
    (159) parameter_declaration -> . declaration_specifiers
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

    RPAREN          shift and go to state 84
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32


    storage_class_specifier shift and go to state 1
    type_specifier  shift and go to state 15
    parameter_list  shift and go to state 88
    parameter_type_list shift and go to state 85
    parameter_declaration shift and go to state 86
    type_qualifier  shift and go to state 30
    declaration_specifiers shift and go to state 87

state 41

    (31) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 31 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 31 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 31 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 31 (type_qualifier_list -> type_qualifier .)
    ASTERISK        reduce using rule 31 (type_qualifier_list -> type_qualifier .)



state 42

    (36) pointer -> ASTERISK type_qualifier_list .
    (38) pointer -> ASTERISK type_qualifier_list . pointer
    (32) type_qualifier_list -> type_qualifier_list . type_qualifier
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

  ! shift/reduce conflict for ASTERISK resolved as shift.
    ID              reduce using rule 36 (pointer -> ASTERISK type_qualifier_list .)
    LPAREN          reduce using rule 36 (pointer -> ASTERISK type_qualifier_list .)
    ASTERISK        shift and go to state 23
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32

  ! ASTERISK        [ reduce using rule 36 (pointer -> ASTERISK type_qualifier_list .) ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    pointer         shift and go to state 90
    type_qualifier  shift and go to state 89

state 43

    (37) pointer -> ASTERISK pointer .

    ID              reduce using rule 37 (pointer -> ASTERISK pointer .)
    LPAREN          reduce using rule 37 (pointer -> ASTERISK pointer .)
    ASTERISK        reduce using rule 37 (pointer -> ASTERISK pointer .)



state 44

    (41) declaration -> declaration_specifiers SEMICOLON .

    $               reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    EXTERN          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    STATIC          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    REGISTER        reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    TREB_PAROUT     reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    ID              reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    LPAREN          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    ASTERISK        reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    BLOCK           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    RBRACE          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    LBRACE          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    TREB_SUPER      reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    AMPERSAND       reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    TILDE           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    EXCLAMATION     reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    INUMBER         reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    FNUMBER         reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    CHARACTER       reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)
    STRING          reduce using rule 41 (declaration -> declaration_specifiers SEMICOLON .)



state 45

    (43) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 43 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 43 (init_declarator_list -> init_declarator .)



state 46

    (42) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (44) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 92
    COMMA           shift and go to state 91



state 47

    (6) function_definition -> declaration_specifiers declarator . compound_statement
    (45) init_declarator -> declarator .
    (46) init_declarator -> declarator . ASSIGN initializer
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE

    SEMICOLON       reduce using rule 45 (init_declarator -> declarator .)
    COMMA           reduce using rule 45 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 94
    LBRACE          shift and go to state 49

  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]

    compound_statement shift and go to state 93

state 48

    (13) declaration_specifiers -> type_qualifier declaration_specifiers .

    ID              reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    LPAREN          reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ASTERISK        reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    SEMICOLON       reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    RPAREN          reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 13 (declaration_specifiers -> type_qualifier declaration_specifiers .)



state 49

    (52) compound_statement -> LBRACE . RBRACE
    (53) compound_statement -> LBRACE . statement_list RBRACE
    (54) compound_statement -> LBRACE . declaration_list RBRACE
    (55) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (56) statement_list -> . statement
    (57) statement_list -> . statement_list statement
    (39) declaration_list -> . declaration
    (40) declaration_list -> . declaration_list declaration
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (41) declaration -> . declaration_specifiers SEMICOLON
    (42) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RBRACE          shift and go to state 97
    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    storage_class_specifier shift and go to state 1
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    type_specifier  shift and go to state 15
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 114
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    declaration_specifiers shift and go to state 108
    declaration     shift and go to state 115
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    type_qualifier  shift and go to state 30
    labeled_statement shift and go to state 99
    declaration_list shift and go to state 102
    conditional_expression shift and go to state 123
    statement_list  shift and go to state 106
    expression      shift and go to state 107

state 50

    (7) function_definition -> declarator compound_statement .

    $               reduce using rule 7 (function_definition -> declarator compound_statement .)
    TYPEDEF         reduce using rule 7 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 7 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 7 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 7 (function_definition -> declarator compound_statement .)
    TREB_PAROUT     reduce using rule 7 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 7 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> declarator compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator compound_statement .)
    ASTERISK        reduce using rule 7 (function_definition -> declarator compound_statement .)
    BLOCK           reduce using rule 7 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 7 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 7 (function_definition -> declarator compound_statement .)



state 51

    (151) direct_declarator -> LPAREN declarator RPAREN .

    LBRACE          reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMICOLON       reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 151 (direct_declarator -> LPAREN declarator RPAREN .)



state 52

    (133) unary_expression -> EXCLAMATION . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 124

state 53

    (124) cast_expression -> unary_expression .

    SEMICOLON       reduce using rule 124 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 124 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 124 (cast_expression -> unary_expression .)
    COLON           reduce using rule 124 (cast_expression -> unary_expression .)
    DOUBLE_PIPE     reduce using rule 124 (cast_expression -> unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 124 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 124 (cast_expression -> unary_expression .)
    CARET           reduce using rule 124 (cast_expression -> unary_expression .)
    AMPERSAND       reduce using rule 124 (cast_expression -> unary_expression .)
    EQ              reduce using rule 124 (cast_expression -> unary_expression .)
    NOT_EQ          reduce using rule 124 (cast_expression -> unary_expression .)
    LESS            reduce using rule 124 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 124 (cast_expression -> unary_expression .)
    LESS_EQ         reduce using rule 124 (cast_expression -> unary_expression .)
    GREATER_EQ      reduce using rule 124 (cast_expression -> unary_expression .)
    SHIFT_LEFT      reduce using rule 124 (cast_expression -> unary_expression .)
    SHIFT_RIGHT     reduce using rule 124 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 124 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 124 (cast_expression -> unary_expression .)
    ASTERISK        reduce using rule 124 (cast_expression -> unary_expression .)
    DIV             reduce using rule 124 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 124 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_PLUS         reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_MINUS        reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_TIMES        reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_DIV          reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_MODULO       reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_SHIFT_LEFT   reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_AMPERSAND    reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_CARET        reduce using rule 124 (cast_expression -> unary_expression .)
    EQ_PIPE         reduce using rule 124 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 124 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 124 (cast_expression -> unary_expression .)



state 54

    (100) inclusive_or_expression -> exclusive_or_expression .
    (103) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    SEMICOLON       reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    RPAREN          reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    DOUBLE_PIPE     reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    DOUBLE_AMPERSAND reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    PIPE            reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACE          reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    RBRACKET        reduce using rule 100 (inclusive_or_expression -> exclusive_or_expression .)
    CARET           shift and go to state 125



state 55

    (143) primary_expression -> CHARACTER .

    ASSIGN          reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_PLUS         reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_MINUS        reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_TIMES        reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_DIV          reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_MODULO       reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_SHIFT_LEFT   reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_SHIFT_RIGHT  reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_AMPERSAND    reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_CARET        reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ_PIPE         reduce using rule 143 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 143 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 143 (primary_expression -> CHARACTER .)
    RPAREN          reduce using rule 143 (primary_expression -> CHARACTER .)
    COLON           reduce using rule 143 (primary_expression -> CHARACTER .)
    DOUBLE_PIPE     reduce using rule 143 (primary_expression -> CHARACTER .)
    DOUBLE_AMPERSAND reduce using rule 143 (primary_expression -> CHARACTER .)
    PIPE            reduce using rule 143 (primary_expression -> CHARACTER .)
    CARET           reduce using rule 143 (primary_expression -> CHARACTER .)
    AMPERSAND       reduce using rule 143 (primary_expression -> CHARACTER .)
    EQ              reduce using rule 143 (primary_expression -> CHARACTER .)
    NOT_EQ          reduce using rule 143 (primary_expression -> CHARACTER .)
    LESS            reduce using rule 143 (primary_expression -> CHARACTER .)
    GREATER         reduce using rule 143 (primary_expression -> CHARACTER .)
    LESS_EQ         reduce using rule 143 (primary_expression -> CHARACTER .)
    GREATER_EQ      reduce using rule 143 (primary_expression -> CHARACTER .)
    SHIFT_LEFT      reduce using rule 143 (primary_expression -> CHARACTER .)
    SHIFT_RIGHT     reduce using rule 143 (primary_expression -> CHARACTER .)
    PLUS            reduce using rule 143 (primary_expression -> CHARACTER .)
    MINUS           reduce using rule 143 (primary_expression -> CHARACTER .)
    ASTERISK        reduce using rule 143 (primary_expression -> CHARACTER .)
    DIV             reduce using rule 143 (primary_expression -> CHARACTER .)
    MODULO          reduce using rule 143 (primary_expression -> CHARACTER .)
    LPAREN          reduce using rule 143 (primary_expression -> CHARACTER .)
    LBRACKET        reduce using rule 143 (primary_expression -> CHARACTER .)
    DOUBLE_PLUS     reduce using rule 143 (primary_expression -> CHARACTER .)
    DOUBLE_MINUS    reduce using rule 143 (primary_expression -> CHARACTER .)
    RBRACE          reduce using rule 143 (primary_expression -> CHARACTER .)
    RBRACKET        reduce using rule 143 (primary_expression -> CHARACTER .)



state 56

    (131) unary_expression -> MINUS . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 126

state 57

    (102) exclusive_or_expression -> and_expression .
    (105) and_expression -> and_expression . AMPERSAND equality_expression

    SEMICOLON       reduce using rule 102 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 102 (exclusive_or_expression -> and_expression .)
    RPAREN          reduce using rule 102 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 102 (exclusive_or_expression -> and_expression .)
    DOUBLE_PIPE     reduce using rule 102 (exclusive_or_expression -> and_expression .)
    DOUBLE_AMPERSAND reduce using rule 102 (exclusive_or_expression -> and_expression .)
    PIPE            reduce using rule 102 (exclusive_or_expression -> and_expression .)
    CARET           reduce using rule 102 (exclusive_or_expression -> and_expression .)
    RBRACE          reduce using rule 102 (exclusive_or_expression -> and_expression .)
    RBRACKET        reduce using rule 102 (exclusive_or_expression -> and_expression .)
    AMPERSAND       shift and go to state 127



state 58

    (146) string_literal -> STRING .

    ASSIGN          reduce using rule 146 (string_literal -> STRING .)
    EQ_PLUS         reduce using rule 146 (string_literal -> STRING .)
    EQ_MINUS        reduce using rule 146 (string_literal -> STRING .)
    EQ_TIMES        reduce using rule 146 (string_literal -> STRING .)
    EQ_DIV          reduce using rule 146 (string_literal -> STRING .)
    EQ_MODULO       reduce using rule 146 (string_literal -> STRING .)
    EQ_SHIFT_LEFT   reduce using rule 146 (string_literal -> STRING .)
    EQ_SHIFT_RIGHT  reduce using rule 146 (string_literal -> STRING .)
    EQ_AMPERSAND    reduce using rule 146 (string_literal -> STRING .)
    EQ_CARET        reduce using rule 146 (string_literal -> STRING .)
    EQ_PIPE         reduce using rule 146 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 146 (string_literal -> STRING .)
    COMMA           reduce using rule 146 (string_literal -> STRING .)
    RPAREN          reduce using rule 146 (string_literal -> STRING .)
    COLON           reduce using rule 146 (string_literal -> STRING .)
    DOUBLE_PIPE     reduce using rule 146 (string_literal -> STRING .)
    DOUBLE_AMPERSAND reduce using rule 146 (string_literal -> STRING .)
    PIPE            reduce using rule 146 (string_literal -> STRING .)
    CARET           reduce using rule 146 (string_literal -> STRING .)
    AMPERSAND       reduce using rule 146 (string_literal -> STRING .)
    EQ              reduce using rule 146 (string_literal -> STRING .)
    NOT_EQ          reduce using rule 146 (string_literal -> STRING .)
    LESS            reduce using rule 146 (string_literal -> STRING .)
    GREATER         reduce using rule 146 (string_literal -> STRING .)
    LESS_EQ         reduce using rule 146 (string_literal -> STRING .)
    GREATER_EQ      reduce using rule 146 (string_literal -> STRING .)
    SHIFT_LEFT      reduce using rule 146 (string_literal -> STRING .)
    SHIFT_RIGHT     reduce using rule 146 (string_literal -> STRING .)
    PLUS            reduce using rule 146 (string_literal -> STRING .)
    MINUS           reduce using rule 146 (string_literal -> STRING .)
    ASTERISK        reduce using rule 146 (string_literal -> STRING .)
    DIV             reduce using rule 146 (string_literal -> STRING .)
    MODULO          reduce using rule 146 (string_literal -> STRING .)
    STRING          reduce using rule 146 (string_literal -> STRING .)
    LPAREN          reduce using rule 146 (string_literal -> STRING .)
    LBRACKET        reduce using rule 146 (string_literal -> STRING .)
    DOUBLE_PLUS     reduce using rule 146 (string_literal -> STRING .)
    DOUBLE_MINUS    reduce using rule 146 (string_literal -> STRING .)
    RBRACE          reduce using rule 146 (string_literal -> STRING .)
    RBRACKET        reduce using rule 146 (string_literal -> STRING .)



state 59

    (98) logical_and_expression -> inclusive_or_expression .
    (101) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    SEMICOLON       reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    RPAREN          reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    DOUBLE_PIPE     reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    DOUBLE_AMPERSAND reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    RBRACE          reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    RBRACKET        reduce using rule 98 (logical_and_expression -> inclusive_or_expression .)
    PIPE            shift and go to state 128



state 60

    (127) unary_expression -> DOUBLE_MINUS . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 129
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83

state 61

    (125) unary_expression -> postfix_expression .
    (135) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> postfix_expression . LPAREN RPAREN
    (137) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (138) postfix_expression -> postfix_expression . DOUBLE_PLUS
    (139) postfix_expression -> postfix_expression . DOUBLE_MINUS

    ASSIGN          reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_PLUS         reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_MINUS        reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_TIMES        reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_DIV          reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_MODULO       reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_SHIFT_LEFT   reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_AMPERSAND    reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_CARET        reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ_PIPE         reduce using rule 125 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 125 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 125 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 125 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 125 (unary_expression -> postfix_expression .)
    DOUBLE_PIPE     reduce using rule 125 (unary_expression -> postfix_expression .)
    DOUBLE_AMPERSAND reduce using rule 125 (unary_expression -> postfix_expression .)
    PIPE            reduce using rule 125 (unary_expression -> postfix_expression .)
    CARET           reduce using rule 125 (unary_expression -> postfix_expression .)
    AMPERSAND       reduce using rule 125 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 125 (unary_expression -> postfix_expression .)
    NOT_EQ          reduce using rule 125 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 125 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 125 (unary_expression -> postfix_expression .)
    LESS_EQ         reduce using rule 125 (unary_expression -> postfix_expression .)
    GREATER_EQ      reduce using rule 125 (unary_expression -> postfix_expression .)
    SHIFT_LEFT      reduce using rule 125 (unary_expression -> postfix_expression .)
    SHIFT_RIGHT     reduce using rule 125 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 125 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 125 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 125 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 125 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 125 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 125 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 125 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 133
    LBRACKET        shift and go to state 131
    DOUBLE_PLUS     shift and go to state 132
    DOUBLE_MINUS    shift and go to state 130

  ! LPAREN          [ shift and go to state 133 ]


state 62

    (140) primary_expression -> ID .

    ASSIGN          reduce using rule 140 (primary_expression -> ID .)
    EQ_PLUS         reduce using rule 140 (primary_expression -> ID .)
    EQ_MINUS        reduce using rule 140 (primary_expression -> ID .)
    EQ_TIMES        reduce using rule 140 (primary_expression -> ID .)
    EQ_DIV          reduce using rule 140 (primary_expression -> ID .)
    EQ_MODULO       reduce using rule 140 (primary_expression -> ID .)
    EQ_SHIFT_LEFT   reduce using rule 140 (primary_expression -> ID .)
    EQ_SHIFT_RIGHT  reduce using rule 140 (primary_expression -> ID .)
    EQ_AMPERSAND    reduce using rule 140 (primary_expression -> ID .)
    EQ_CARET        reduce using rule 140 (primary_expression -> ID .)
    EQ_PIPE         reduce using rule 140 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 140 (primary_expression -> ID .)
    COMMA           reduce using rule 140 (primary_expression -> ID .)
    RPAREN          reduce using rule 140 (primary_expression -> ID .)
    COLON           reduce using rule 140 (primary_expression -> ID .)
    DOUBLE_PIPE     reduce using rule 140 (primary_expression -> ID .)
    DOUBLE_AMPERSAND reduce using rule 140 (primary_expression -> ID .)
    PIPE            reduce using rule 140 (primary_expression -> ID .)
    CARET           reduce using rule 140 (primary_expression -> ID .)
    AMPERSAND       reduce using rule 140 (primary_expression -> ID .)
    EQ              reduce using rule 140 (primary_expression -> ID .)
    NOT_EQ          reduce using rule 140 (primary_expression -> ID .)
    LESS            reduce using rule 140 (primary_expression -> ID .)
    GREATER         reduce using rule 140 (primary_expression -> ID .)
    LESS_EQ         reduce using rule 140 (primary_expression -> ID .)
    GREATER_EQ      reduce using rule 140 (primary_expression -> ID .)
    SHIFT_LEFT      reduce using rule 140 (primary_expression -> ID .)
    SHIFT_RIGHT     reduce using rule 140 (primary_expression -> ID .)
    PLUS            reduce using rule 140 (primary_expression -> ID .)
    MINUS           reduce using rule 140 (primary_expression -> ID .)
    ASTERISK        reduce using rule 140 (primary_expression -> ID .)
    DIV             reduce using rule 140 (primary_expression -> ID .)
    MODULO          reduce using rule 140 (primary_expression -> ID .)
    LPAREN          reduce using rule 140 (primary_expression -> ID .)
    LBRACKET        reduce using rule 140 (primary_expression -> ID .)
    DOUBLE_PLUS     reduce using rule 140 (primary_expression -> ID .)
    DOUBLE_MINUS    reduce using rule 140 (primary_expression -> ID .)
    RBRACE          reduce using rule 140 (primary_expression -> ID .)
    RBRACKET        reduce using rule 140 (primary_expression -> ID .)



state 63

    (130) unary_expression -> PLUS . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 134

state 64

    (106) equality_expression -> relational_expression .
    (110) relational_expression -> relational_expression . LESS shift_expression
    (111) relational_expression -> relational_expression . GREATER shift_expression
    (112) relational_expression -> relational_expression . LESS_EQ shift_expression
    (113) relational_expression -> relational_expression . GREATER_EQ shift_expression

    SEMICOLON       reduce using rule 106 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 106 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 106 (equality_expression -> relational_expression .)
    COLON           reduce using rule 106 (equality_expression -> relational_expression .)
    DOUBLE_PIPE     reduce using rule 106 (equality_expression -> relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 106 (equality_expression -> relational_expression .)
    PIPE            reduce using rule 106 (equality_expression -> relational_expression .)
    CARET           reduce using rule 106 (equality_expression -> relational_expression .)
    AMPERSAND       reduce using rule 106 (equality_expression -> relational_expression .)
    EQ              reduce using rule 106 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 106 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 106 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 106 (equality_expression -> relational_expression .)
    LESS            shift and go to state 137
    GREATER         shift and go to state 136
    LESS_EQ         shift and go to state 135
    GREATER_EQ      shift and go to state 138



state 65

    (132) unary_expression -> TILDE . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 139

state 66

    (120) mult_expression -> cast_expression .

    SEMICOLON       reduce using rule 120 (mult_expression -> cast_expression .)
    COMMA           reduce using rule 120 (mult_expression -> cast_expression .)
    RPAREN          reduce using rule 120 (mult_expression -> cast_expression .)
    COLON           reduce using rule 120 (mult_expression -> cast_expression .)
    DOUBLE_PIPE     reduce using rule 120 (mult_expression -> cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 120 (mult_expression -> cast_expression .)
    PIPE            reduce using rule 120 (mult_expression -> cast_expression .)
    CARET           reduce using rule 120 (mult_expression -> cast_expression .)
    AMPERSAND       reduce using rule 120 (mult_expression -> cast_expression .)
    EQ              reduce using rule 120 (mult_expression -> cast_expression .)
    NOT_EQ          reduce using rule 120 (mult_expression -> cast_expression .)
    LESS            reduce using rule 120 (mult_expression -> cast_expression .)
    GREATER         reduce using rule 120 (mult_expression -> cast_expression .)
    LESS_EQ         reduce using rule 120 (mult_expression -> cast_expression .)
    GREATER_EQ      reduce using rule 120 (mult_expression -> cast_expression .)
    SHIFT_LEFT      reduce using rule 120 (mult_expression -> cast_expression .)
    SHIFT_RIGHT     reduce using rule 120 (mult_expression -> cast_expression .)
    PLUS            reduce using rule 120 (mult_expression -> cast_expression .)
    MINUS           reduce using rule 120 (mult_expression -> cast_expression .)
    ASTERISK        reduce using rule 120 (mult_expression -> cast_expression .)
    DIV             reduce using rule 120 (mult_expression -> cast_expression .)
    MODULO          reduce using rule 120 (mult_expression -> cast_expression .)
    RBRACE          reduce using rule 120 (mult_expression -> cast_expression .)
    RBRACKET        reduce using rule 120 (mult_expression -> cast_expression .)



state 67

    (95) conditional_expression -> logical_or_expression .
    (97) logical_or_expression -> logical_or_expression . DOUBLE_PIPE logical_and_expression

    SEMICOLON       reduce using rule 95 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 95 (conditional_expression -> logical_or_expression .)
    RPAREN          reduce using rule 95 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 95 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 95 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 95 (conditional_expression -> logical_or_expression .)
    DOUBLE_PIPE     shift and go to state 140



state 68

    (152) direct_declarator -> direct_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 141



state 69

    (144) primary_expression -> string_literal .
    (147) string_literal -> string_literal . STRING

    ASSIGN          reduce using rule 144 (primary_expression -> string_literal .)
    EQ_PLUS         reduce using rule 144 (primary_expression -> string_literal .)
    EQ_MINUS        reduce using rule 144 (primary_expression -> string_literal .)
    EQ_TIMES        reduce using rule 144 (primary_expression -> string_literal .)
    EQ_DIV          reduce using rule 144 (primary_expression -> string_literal .)
    EQ_MODULO       reduce using rule 144 (primary_expression -> string_literal .)
    EQ_SHIFT_LEFT   reduce using rule 144 (primary_expression -> string_literal .)
    EQ_SHIFT_RIGHT  reduce using rule 144 (primary_expression -> string_literal .)
    EQ_AMPERSAND    reduce using rule 144 (primary_expression -> string_literal .)
    EQ_CARET        reduce using rule 144 (primary_expression -> string_literal .)
    EQ_PIPE         reduce using rule 144 (primary_expression -> string_literal .)
    SEMICOLON       reduce using rule 144 (primary_expression -> string_literal .)
    COMMA           reduce using rule 144 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 144 (primary_expression -> string_literal .)
    COLON           reduce using rule 144 (primary_expression -> string_literal .)
    DOUBLE_PIPE     reduce using rule 144 (primary_expression -> string_literal .)
    DOUBLE_AMPERSAND reduce using rule 144 (primary_expression -> string_literal .)
    PIPE            reduce using rule 144 (primary_expression -> string_literal .)
    CARET           reduce using rule 144 (primary_expression -> string_literal .)
    AMPERSAND       reduce using rule 144 (primary_expression -> string_literal .)
    EQ              reduce using rule 144 (primary_expression -> string_literal .)
    NOT_EQ          reduce using rule 144 (primary_expression -> string_literal .)
    LESS            reduce using rule 144 (primary_expression -> string_literal .)
    GREATER         reduce using rule 144 (primary_expression -> string_literal .)
    LESS_EQ         reduce using rule 144 (primary_expression -> string_literal .)
    GREATER_EQ      reduce using rule 144 (primary_expression -> string_literal .)
    SHIFT_LEFT      reduce using rule 144 (primary_expression -> string_literal .)
    SHIFT_RIGHT     reduce using rule 144 (primary_expression -> string_literal .)
    PLUS            reduce using rule 144 (primary_expression -> string_literal .)
    MINUS           reduce using rule 144 (primary_expression -> string_literal .)
    ASTERISK        reduce using rule 144 (primary_expression -> string_literal .)
    DIV             reduce using rule 144 (primary_expression -> string_literal .)
    MODULO          reduce using rule 144 (primary_expression -> string_literal .)
    LPAREN          reduce using rule 144 (primary_expression -> string_literal .)
    LBRACKET        reduce using rule 144 (primary_expression -> string_literal .)
    DOUBLE_PLUS     reduce using rule 144 (primary_expression -> string_literal .)
    DOUBLE_MINUS    reduce using rule 144 (primary_expression -> string_literal .)
    RBRACE          reduce using rule 144 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 144 (primary_expression -> string_literal .)
    STRING          shift and go to state 142



state 70

    (129) unary_expression -> ASTERISK . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 143

state 71

    (114) shift_expression -> additive_expression .
    (118) additive_expression -> additive_expression . PLUS mult_expression
    (119) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 114 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 114 (shift_expression -> additive_expression .)
    RPAREN          reduce using rule 114 (shift_expression -> additive_expression .)
    COLON           reduce using rule 114 (shift_expression -> additive_expression .)
    DOUBLE_PIPE     reduce using rule 114 (shift_expression -> additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 114 (shift_expression -> additive_expression .)
    PIPE            reduce using rule 114 (shift_expression -> additive_expression .)
    CARET           reduce using rule 114 (shift_expression -> additive_expression .)
    AMPERSAND       reduce using rule 114 (shift_expression -> additive_expression .)
    EQ              reduce using rule 114 (shift_expression -> additive_expression .)
    NOT_EQ          reduce using rule 114 (shift_expression -> additive_expression .)
    LESS            reduce using rule 114 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 114 (shift_expression -> additive_expression .)
    LESS_EQ         reduce using rule 114 (shift_expression -> additive_expression .)
    GREATER_EQ      reduce using rule 114 (shift_expression -> additive_expression .)
    SHIFT_LEFT      reduce using rule 114 (shift_expression -> additive_expression .)
    SHIFT_RIGHT     reduce using rule 114 (shift_expression -> additive_expression .)
    RBRACE          reduce using rule 114 (shift_expression -> additive_expression .)
    RBRACKET        reduce using rule 114 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145



state 72

    (128) unary_expression -> AMPERSAND . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 146

state 73

    (126) unary_expression -> DOUBLE_PLUS . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 147
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83

state 74

    (145) primary_expression -> LPAREN . expression RPAREN
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 148
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 75

    (96) logical_or_expression -> logical_and_expression .
    (99) logical_and_expression -> logical_and_expression . DOUBLE_AMPERSAND inclusive_or_expression

    SEMICOLON       reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    DOUBLE_PIPE     reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 96 (logical_or_expression -> logical_and_expression .)
    DOUBLE_AMPERSAND shift and go to state 149



state 76

    (109) relational_expression -> shift_expression .
    (115) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (116) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    SEMICOLON       reduce using rule 109 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 109 (relational_expression -> shift_expression .)
    RPAREN          reduce using rule 109 (relational_expression -> shift_expression .)
    COLON           reduce using rule 109 (relational_expression -> shift_expression .)
    DOUBLE_PIPE     reduce using rule 109 (relational_expression -> shift_expression .)
    DOUBLE_AMPERSAND reduce using rule 109 (relational_expression -> shift_expression .)
    PIPE            reduce using rule 109 (relational_expression -> shift_expression .)
    CARET           reduce using rule 109 (relational_expression -> shift_expression .)
    AMPERSAND       reduce using rule 109 (relational_expression -> shift_expression .)
    EQ              reduce using rule 109 (relational_expression -> shift_expression .)
    NOT_EQ          reduce using rule 109 (relational_expression -> shift_expression .)
    LESS            reduce using rule 109 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 109 (relational_expression -> shift_expression .)
    LESS_EQ         reduce using rule 109 (relational_expression -> shift_expression .)
    GREATER_EQ      reduce using rule 109 (relational_expression -> shift_expression .)
    RBRACE          reduce using rule 109 (relational_expression -> shift_expression .)
    RBRACKET        reduce using rule 109 (relational_expression -> shift_expression .)
    SHIFT_LEFT      shift and go to state 151
    SHIFT_RIGHT     shift and go to state 150



state 77

    (104) and_expression -> equality_expression .
    (107) equality_expression -> equality_expression . EQ relational_expression
    (108) equality_expression -> equality_expression . NOT_EQ relational_expression

    SEMICOLON       reduce using rule 104 (and_expression -> equality_expression .)
    COMMA           reduce using rule 104 (and_expression -> equality_expression .)
    RPAREN          reduce using rule 104 (and_expression -> equality_expression .)
    COLON           reduce using rule 104 (and_expression -> equality_expression .)
    DOUBLE_PIPE     reduce using rule 104 (and_expression -> equality_expression .)
    DOUBLE_AMPERSAND reduce using rule 104 (and_expression -> equality_expression .)
    PIPE            reduce using rule 104 (and_expression -> equality_expression .)
    CARET           reduce using rule 104 (and_expression -> equality_expression .)
    AMPERSAND       reduce using rule 104 (and_expression -> equality_expression .)
    RBRACE          reduce using rule 104 (and_expression -> equality_expression .)
    RBRACKET        reduce using rule 104 (and_expression -> equality_expression .)
    EQ              shift and go to state 153
    NOT_EQ          shift and go to state 152



state 78

    (142) primary_expression -> FNUMBER .

    ASSIGN          reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_PLUS         reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_MINUS        reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_TIMES        reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_DIV          reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_MODULO       reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_SHIFT_LEFT   reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_SHIFT_RIGHT  reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_AMPERSAND    reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_CARET        reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ_PIPE         reduce using rule 142 (primary_expression -> FNUMBER .)
    SEMICOLON       reduce using rule 142 (primary_expression -> FNUMBER .)
    COMMA           reduce using rule 142 (primary_expression -> FNUMBER .)
    RPAREN          reduce using rule 142 (primary_expression -> FNUMBER .)
    COLON           reduce using rule 142 (primary_expression -> FNUMBER .)
    DOUBLE_PIPE     reduce using rule 142 (primary_expression -> FNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 142 (primary_expression -> FNUMBER .)
    PIPE            reduce using rule 142 (primary_expression -> FNUMBER .)
    CARET           reduce using rule 142 (primary_expression -> FNUMBER .)
    AMPERSAND       reduce using rule 142 (primary_expression -> FNUMBER .)
    EQ              reduce using rule 142 (primary_expression -> FNUMBER .)
    NOT_EQ          reduce using rule 142 (primary_expression -> FNUMBER .)
    LESS            reduce using rule 142 (primary_expression -> FNUMBER .)
    GREATER         reduce using rule 142 (primary_expression -> FNUMBER .)
    LESS_EQ         reduce using rule 142 (primary_expression -> FNUMBER .)
    GREATER_EQ      reduce using rule 142 (primary_expression -> FNUMBER .)
    SHIFT_LEFT      reduce using rule 142 (primary_expression -> FNUMBER .)
    SHIFT_RIGHT     reduce using rule 142 (primary_expression -> FNUMBER .)
    PLUS            reduce using rule 142 (primary_expression -> FNUMBER .)
    MINUS           reduce using rule 142 (primary_expression -> FNUMBER .)
    ASTERISK        reduce using rule 142 (primary_expression -> FNUMBER .)
    DIV             reduce using rule 142 (primary_expression -> FNUMBER .)
    MODULO          reduce using rule 142 (primary_expression -> FNUMBER .)
    LPAREN          reduce using rule 142 (primary_expression -> FNUMBER .)
    LBRACKET        reduce using rule 142 (primary_expression -> FNUMBER .)
    DOUBLE_PLUS     reduce using rule 142 (primary_expression -> FNUMBER .)
    DOUBLE_MINUS    reduce using rule 142 (primary_expression -> FNUMBER .)
    RBRACE          reduce using rule 142 (primary_expression -> FNUMBER .)
    RBRACKET        reduce using rule 142 (primary_expression -> FNUMBER .)



state 79

    (141) primary_expression -> INUMBER .

    ASSIGN          reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_PLUS         reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_MINUS        reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_TIMES        reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_DIV          reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_MODULO       reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_SHIFT_LEFT   reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_SHIFT_RIGHT  reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_AMPERSAND    reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_CARET        reduce using rule 141 (primary_expression -> INUMBER .)
    EQ_PIPE         reduce using rule 141 (primary_expression -> INUMBER .)
    SEMICOLON       reduce using rule 141 (primary_expression -> INUMBER .)
    COMMA           reduce using rule 141 (primary_expression -> INUMBER .)
    RPAREN          reduce using rule 141 (primary_expression -> INUMBER .)
    COLON           reduce using rule 141 (primary_expression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 141 (primary_expression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 141 (primary_expression -> INUMBER .)
    PIPE            reduce using rule 141 (primary_expression -> INUMBER .)
    CARET           reduce using rule 141 (primary_expression -> INUMBER .)
    AMPERSAND       reduce using rule 141 (primary_expression -> INUMBER .)
    EQ              reduce using rule 141 (primary_expression -> INUMBER .)
    NOT_EQ          reduce using rule 141 (primary_expression -> INUMBER .)
    LESS            reduce using rule 141 (primary_expression -> INUMBER .)
    GREATER         reduce using rule 141 (primary_expression -> INUMBER .)
    LESS_EQ         reduce using rule 141 (primary_expression -> INUMBER .)
    GREATER_EQ      reduce using rule 141 (primary_expression -> INUMBER .)
    SHIFT_LEFT      reduce using rule 141 (primary_expression -> INUMBER .)
    SHIFT_RIGHT     reduce using rule 141 (primary_expression -> INUMBER .)
    PLUS            reduce using rule 141 (primary_expression -> INUMBER .)
    MINUS           reduce using rule 141 (primary_expression -> INUMBER .)
    ASTERISK        reduce using rule 141 (primary_expression -> INUMBER .)
    DIV             reduce using rule 141 (primary_expression -> INUMBER .)
    MODULO          reduce using rule 141 (primary_expression -> INUMBER .)
    LPAREN          reduce using rule 141 (primary_expression -> INUMBER .)
    LBRACKET        reduce using rule 141 (primary_expression -> INUMBER .)
    DOUBLE_PLUS     reduce using rule 141 (primary_expression -> INUMBER .)
    DOUBLE_MINUS    reduce using rule 141 (primary_expression -> INUMBER .)
    RBRACE          reduce using rule 141 (primary_expression -> INUMBER .)
    RBRACKET        reduce using rule 141 (primary_expression -> INUMBER .)



state 80

    (94) constant_expression -> conditional_expression .

    COLON           reduce using rule 94 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 94 (constant_expression -> conditional_expression .)



state 81

    (117) additive_expression -> mult_expression .
    (121) mult_expression -> mult_expression . ASTERISK cast_expression
    (122) mult_expression -> mult_expression . DIV cast_expression
    (123) mult_expression -> mult_expression . MODULO cast_expression

    SEMICOLON       reduce using rule 117 (additive_expression -> mult_expression .)
    COMMA           reduce using rule 117 (additive_expression -> mult_expression .)
    RPAREN          reduce using rule 117 (additive_expression -> mult_expression .)
    COLON           reduce using rule 117 (additive_expression -> mult_expression .)
    DOUBLE_PIPE     reduce using rule 117 (additive_expression -> mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 117 (additive_expression -> mult_expression .)
    PIPE            reduce using rule 117 (additive_expression -> mult_expression .)
    CARET           reduce using rule 117 (additive_expression -> mult_expression .)
    AMPERSAND       reduce using rule 117 (additive_expression -> mult_expression .)
    EQ              reduce using rule 117 (additive_expression -> mult_expression .)
    NOT_EQ          reduce using rule 117 (additive_expression -> mult_expression .)
    LESS            reduce using rule 117 (additive_expression -> mult_expression .)
    GREATER         reduce using rule 117 (additive_expression -> mult_expression .)
    LESS_EQ         reduce using rule 117 (additive_expression -> mult_expression .)
    GREATER_EQ      reduce using rule 117 (additive_expression -> mult_expression .)
    SHIFT_LEFT      reduce using rule 117 (additive_expression -> mult_expression .)
    SHIFT_RIGHT     reduce using rule 117 (additive_expression -> mult_expression .)
    PLUS            reduce using rule 117 (additive_expression -> mult_expression .)
    MINUS           reduce using rule 117 (additive_expression -> mult_expression .)
    RBRACE          reduce using rule 117 (additive_expression -> mult_expression .)
    RBRACKET        reduce using rule 117 (additive_expression -> mult_expression .)
    ASTERISK        shift and go to state 155
    DIV             shift and go to state 154
    MODULO          shift and go to state 156



state 82

    (153) direct_declarator -> direct_declarator LBRACKET RBRACKET .

    LBRACE          reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LPAREN          reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    COMMA           reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)
    RPAREN          reduce using rule 153 (direct_declarator -> direct_declarator LBRACKET RBRACKET .)



state 83

    (134) postfix_expression -> primary_expression .

    ASSIGN          reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_PLUS         reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_MINUS        reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_TIMES        reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_DIV          reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_MODULO       reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_SHIFT_LEFT   reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_AMPERSAND    reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_CARET        reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ_PIPE         reduce using rule 134 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 134 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 134 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 134 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 134 (postfix_expression -> primary_expression .)
    DOUBLE_PIPE     reduce using rule 134 (postfix_expression -> primary_expression .)
    DOUBLE_AMPERSAND reduce using rule 134 (postfix_expression -> primary_expression .)
    PIPE            reduce using rule 134 (postfix_expression -> primary_expression .)
    CARET           reduce using rule 134 (postfix_expression -> primary_expression .)
    AMPERSAND       reduce using rule 134 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 134 (postfix_expression -> primary_expression .)
    NOT_EQ          reduce using rule 134 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 134 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 134 (postfix_expression -> primary_expression .)
    LESS_EQ         reduce using rule 134 (postfix_expression -> primary_expression .)
    GREATER_EQ      reduce using rule 134 (postfix_expression -> primary_expression .)
    SHIFT_LEFT      reduce using rule 134 (postfix_expression -> primary_expression .)
    SHIFT_RIGHT     reduce using rule 134 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 134 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 134 (postfix_expression -> primary_expression .)
    ASTERISK        reduce using rule 134 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 134 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 134 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 134 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 134 (postfix_expression -> primary_expression .)
    DOUBLE_PLUS     reduce using rule 134 (postfix_expression -> primary_expression .)
    DOUBLE_MINUS    reduce using rule 134 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 134 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 134 (postfix_expression -> primary_expression .)



state 84

    (150) direct_declarator -> direct_declarator LPAREN RPAREN .

    LBRACE          reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LPAREN          reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    LBRACKET        reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    SEMICOLON       reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    COMMA           reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    ASSIGN          reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)
    RPAREN          reduce using rule 150 (direct_declarator -> direct_declarator LPAREN RPAREN .)



state 85

    (149) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 157



state 86

    (156) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 156 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 156 (parameter_list -> parameter_declaration .)



state 87

    (158) parameter_declaration -> declaration_specifiers . declarator
    (159) parameter_declaration -> declaration_specifiers .
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    RPAREN          reduce using rule 159 (parameter_declaration -> declaration_specifiers .)
    COMMA           reduce using rule 159 (parameter_declaration -> declaration_specifiers .)
    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    declarator      shift and go to state 158
    pointer         shift and go to state 12

state 88

    (154) parameter_type_list -> parameter_list .
    (155) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (157) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 154 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 159

  ! COMMA           [ shift and go to state 159 ]


state 89

    (32) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 32 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 32 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 32 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 32 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ASTERISK        reduce using rule 32 (type_qualifier_list -> type_qualifier_list type_qualifier .)



state 90

    (38) pointer -> ASTERISK type_qualifier_list pointer .

    ID              reduce using rule 38 (pointer -> ASTERISK type_qualifier_list pointer .)
    LPAREN          reduce using rule 38 (pointer -> ASTERISK type_qualifier_list pointer .)
    ASTERISK        reduce using rule 38 (pointer -> ASTERISK type_qualifier_list pointer .)



state 91

    (44) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (45) init_declarator -> . declarator
    (46) init_declarator -> . declarator ASSIGN initializer
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    init_declarator shift and go to state 160
    declarator      shift and go to state 161
    pointer         shift and go to state 12

state 92

    (42) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    $               reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TREB_PAROUT     reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ID              reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LPAREN          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ASTERISK        reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BLOCK           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RBRACE          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LBRACE          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TREB_SUPER      reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AMPERSAND       reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TILDE           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXCLAMATION     reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INUMBER         reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FNUMBER         reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHARACTER       reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING          reduce using rule 42 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)



state 93

    (6) function_definition -> declaration_specifiers declarator compound_statement .

    $               reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPEDEF         reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    TREB_PAROUT     reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    ID              reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    ASTERISK        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    BLOCK           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 6 (function_definition -> declaration_specifiers declarator compound_statement .)



state 94

    (46) init_declarator -> declarator ASSIGN . initializer
    (47) initializer -> . assignment_expression
    (48) initializer -> . LBRACE initializer_list RBRACE
    (49) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    LBRACE          shift and go to state 164
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! LBRACE          [ shift and go to state 164 ]

    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    initializer     shift and go to state 162
    additive_expression shift and go to state 71
    string_literal  shift and go to state 69
    inclusive_or_expression shift and go to state 59
    postfix_expression shift and go to state 61
    and_expression  shift and go to state 57
    relational_expression shift and go to state 64
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 163
    conditional_expression shift and go to state 123
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    mult_expression shift and go to state 81

state 95

    (61) statement -> expression_statement .

    RBRACE          reduce using rule 61 (statement -> expression_statement .)
    LBRACE          reduce using rule 61 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 61 (statement -> expression_statement .)
    IF              reduce using rule 61 (statement -> expression_statement .)
    SWITCH          reduce using rule 61 (statement -> expression_statement .)
    WHILE           reduce using rule 61 (statement -> expression_statement .)
    FOR             reduce using rule 61 (statement -> expression_statement .)
    DO              reduce using rule 61 (statement -> expression_statement .)
    CASE            reduce using rule 61 (statement -> expression_statement .)
    DEFAULT         reduce using rule 61 (statement -> expression_statement .)
    TREB_SUPER      reduce using rule 61 (statement -> expression_statement .)
    DOUBLE_PLUS     reduce using rule 61 (statement -> expression_statement .)
    DOUBLE_MINUS    reduce using rule 61 (statement -> expression_statement .)
    AMPERSAND       reduce using rule 61 (statement -> expression_statement .)
    ASTERISK        reduce using rule 61 (statement -> expression_statement .)
    PLUS            reduce using rule 61 (statement -> expression_statement .)
    MINUS           reduce using rule 61 (statement -> expression_statement .)
    TILDE           reduce using rule 61 (statement -> expression_statement .)
    EXCLAMATION     reduce using rule 61 (statement -> expression_statement .)
    RETURN          reduce using rule 61 (statement -> expression_statement .)
    BREAK           reduce using rule 61 (statement -> expression_statement .)
    CONTINUE        reduce using rule 61 (statement -> expression_statement .)
    ID              reduce using rule 61 (statement -> expression_statement .)
    INUMBER         reduce using rule 61 (statement -> expression_statement .)
    FNUMBER         reduce using rule 61 (statement -> expression_statement .)
    CHARACTER       reduce using rule 61 (statement -> expression_statement .)
    STRING          reduce using rule 61 (statement -> expression_statement .)
    LPAREN          reduce using rule 61 (statement -> expression_statement .)
    ELSE            reduce using rule 61 (statement -> expression_statement .)



state 96

    (63) statement -> iteration_statement .

    RBRACE          reduce using rule 63 (statement -> iteration_statement .)
    LBRACE          reduce using rule 63 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 63 (statement -> iteration_statement .)
    IF              reduce using rule 63 (statement -> iteration_statement .)
    SWITCH          reduce using rule 63 (statement -> iteration_statement .)
    WHILE           reduce using rule 63 (statement -> iteration_statement .)
    FOR             reduce using rule 63 (statement -> iteration_statement .)
    DO              reduce using rule 63 (statement -> iteration_statement .)
    CASE            reduce using rule 63 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 63 (statement -> iteration_statement .)
    TREB_SUPER      reduce using rule 63 (statement -> iteration_statement .)
    DOUBLE_PLUS     reduce using rule 63 (statement -> iteration_statement .)
    DOUBLE_MINUS    reduce using rule 63 (statement -> iteration_statement .)
    AMPERSAND       reduce using rule 63 (statement -> iteration_statement .)
    ASTERISK        reduce using rule 63 (statement -> iteration_statement .)
    PLUS            reduce using rule 63 (statement -> iteration_statement .)
    MINUS           reduce using rule 63 (statement -> iteration_statement .)
    TILDE           reduce using rule 63 (statement -> iteration_statement .)
    EXCLAMATION     reduce using rule 63 (statement -> iteration_statement .)
    RETURN          reduce using rule 63 (statement -> iteration_statement .)
    BREAK           reduce using rule 63 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 63 (statement -> iteration_statement .)
    ID              reduce using rule 63 (statement -> iteration_statement .)
    INUMBER         reduce using rule 63 (statement -> iteration_statement .)
    FNUMBER         reduce using rule 63 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 63 (statement -> iteration_statement .)
    STRING          reduce using rule 63 (statement -> iteration_statement .)
    LPAREN          reduce using rule 63 (statement -> iteration_statement .)
    ELSE            reduce using rule 63 (statement -> iteration_statement .)



state 97

    (52) compound_statement -> LBRACE RBRACE .

    $               reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    TYPEDEF         reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    STATIC          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    AUTO            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    REGISTER        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    TREB_PAROUT     reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    VOID            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SHORT           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LONG            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SIGNED          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    UNSIGNED        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    ASTERISK        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BLOCK           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CONST           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    VOLATILE        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    TREB_SUPER      reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DOUBLE_PLUS     reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    DOUBLE_MINUS    reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    AMPERSAND       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    TILDE           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    EXCLAMATION     reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    INUMBER         reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    FNUMBER         reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    CHARACTER       reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 52 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 52 (compound_statement -> LBRACE RBRACE .)



state 98

    (59) statement -> super_statement .

    RBRACE          reduce using rule 59 (statement -> super_statement .)
    LBRACE          reduce using rule 59 (statement -> super_statement .)
    SEMICOLON       reduce using rule 59 (statement -> super_statement .)
    IF              reduce using rule 59 (statement -> super_statement .)
    SWITCH          reduce using rule 59 (statement -> super_statement .)
    WHILE           reduce using rule 59 (statement -> super_statement .)
    FOR             reduce using rule 59 (statement -> super_statement .)
    DO              reduce using rule 59 (statement -> super_statement .)
    CASE            reduce using rule 59 (statement -> super_statement .)
    DEFAULT         reduce using rule 59 (statement -> super_statement .)
    TREB_SUPER      reduce using rule 59 (statement -> super_statement .)
    DOUBLE_PLUS     reduce using rule 59 (statement -> super_statement .)
    DOUBLE_MINUS    reduce using rule 59 (statement -> super_statement .)
    AMPERSAND       reduce using rule 59 (statement -> super_statement .)
    ASTERISK        reduce using rule 59 (statement -> super_statement .)
    PLUS            reduce using rule 59 (statement -> super_statement .)
    MINUS           reduce using rule 59 (statement -> super_statement .)
    TILDE           reduce using rule 59 (statement -> super_statement .)
    EXCLAMATION     reduce using rule 59 (statement -> super_statement .)
    RETURN          reduce using rule 59 (statement -> super_statement .)
    BREAK           reduce using rule 59 (statement -> super_statement .)
    CONTINUE        reduce using rule 59 (statement -> super_statement .)
    ID              reduce using rule 59 (statement -> super_statement .)
    INUMBER         reduce using rule 59 (statement -> super_statement .)
    FNUMBER         reduce using rule 59 (statement -> super_statement .)
    CHARACTER       reduce using rule 59 (statement -> super_statement .)
    STRING          reduce using rule 59 (statement -> super_statement .)
    LPAREN          reduce using rule 59 (statement -> super_statement .)
    ELSE            reduce using rule 59 (statement -> super_statement .)



state 99

    (58) statement -> labeled_statement .

    RBRACE          reduce using rule 58 (statement -> labeled_statement .)
    LBRACE          reduce using rule 58 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 58 (statement -> labeled_statement .)
    IF              reduce using rule 58 (statement -> labeled_statement .)
    SWITCH          reduce using rule 58 (statement -> labeled_statement .)
    WHILE           reduce using rule 58 (statement -> labeled_statement .)
    FOR             reduce using rule 58 (statement -> labeled_statement .)
    DO              reduce using rule 58 (statement -> labeled_statement .)
    CASE            reduce using rule 58 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 58 (statement -> labeled_statement .)
    TREB_SUPER      reduce using rule 58 (statement -> labeled_statement .)
    DOUBLE_PLUS     reduce using rule 58 (statement -> labeled_statement .)
    DOUBLE_MINUS    reduce using rule 58 (statement -> labeled_statement .)
    AMPERSAND       reduce using rule 58 (statement -> labeled_statement .)
    ASTERISK        reduce using rule 58 (statement -> labeled_statement .)
    PLUS            reduce using rule 58 (statement -> labeled_statement .)
    MINUS           reduce using rule 58 (statement -> labeled_statement .)
    TILDE           reduce using rule 58 (statement -> labeled_statement .)
    EXCLAMATION     reduce using rule 58 (statement -> labeled_statement .)
    RETURN          reduce using rule 58 (statement -> labeled_statement .)
    BREAK           reduce using rule 58 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 58 (statement -> labeled_statement .)
    ID              reduce using rule 58 (statement -> labeled_statement .)
    INUMBER         reduce using rule 58 (statement -> labeled_statement .)
    FNUMBER         reduce using rule 58 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 58 (statement -> labeled_statement .)
    STRING          reduce using rule 58 (statement -> labeled_statement .)
    LPAREN          reduce using rule 58 (statement -> labeled_statement .)
    ELSE            reduce using rule 58 (statement -> labeled_statement .)



state 100

    (72) jump_statement -> RETURN . SEMICOLON
    (73) jump_statement -> RETURN . expression SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    SEMICOLON       shift and go to state 165
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 166
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 101

    (83) assignment_expression -> unary_expression . ASSIGN assignment_expression
    (84) assignment_expression -> unary_expression . EQ_PLUS assignment_expression
    (85) assignment_expression -> unary_expression . EQ_MINUS assignment_expression
    (86) assignment_expression -> unary_expression . EQ_TIMES assignment_expression
    (87) assignment_expression -> unary_expression . EQ_DIV assignment_expression
    (88) assignment_expression -> unary_expression . EQ_MODULO assignment_expression
    (89) assignment_expression -> unary_expression . EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> unary_expression . EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> unary_expression . EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> unary_expression . EQ_CARET assignment_expression
    (93) assignment_expression -> unary_expression . EQ_PIPE assignment_expression
    (124) cast_expression -> unary_expression .

  ! shift/reduce conflict for ASSIGN resolved as shift.
  ! shift/reduce conflict for EQ_PLUS resolved as shift.
  ! shift/reduce conflict for EQ_MINUS resolved as shift.
  ! shift/reduce conflict for EQ_TIMES resolved as shift.
  ! shift/reduce conflict for EQ_DIV resolved as shift.
  ! shift/reduce conflict for EQ_MODULO resolved as shift.
  ! shift/reduce conflict for EQ_SHIFT_LEFT resolved as shift.
  ! shift/reduce conflict for EQ_SHIFT_RIGHT resolved as shift.
  ! shift/reduce conflict for EQ_AMPERSAND resolved as shift.
  ! shift/reduce conflict for EQ_CARET resolved as shift.
  ! shift/reduce conflict for EQ_PIPE resolved as shift.
    ASSIGN          shift and go to state 177
    EQ_PLUS         shift and go to state 170
    EQ_MINUS        shift and go to state 173
    EQ_TIMES        shift and go to state 169
    EQ_DIV          shift and go to state 171
    EQ_MODULO       shift and go to state 176
    EQ_SHIFT_LEFT   shift and go to state 168
    EQ_SHIFT_RIGHT  shift and go to state 167
    EQ_AMPERSAND    shift and go to state 174
    EQ_CARET        shift and go to state 172
    EQ_PIPE         shift and go to state 175
    SEMICOLON       reduce using rule 124 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 124 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 124 (cast_expression -> unary_expression .)
    COLON           reduce using rule 124 (cast_expression -> unary_expression .)
    DOUBLE_PIPE     reduce using rule 124 (cast_expression -> unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 124 (cast_expression -> unary_expression .)
    PIPE            reduce using rule 124 (cast_expression -> unary_expression .)
    CARET           reduce using rule 124 (cast_expression -> unary_expression .)
    AMPERSAND       reduce using rule 124 (cast_expression -> unary_expression .)
    EQ              reduce using rule 124 (cast_expression -> unary_expression .)
    NOT_EQ          reduce using rule 124 (cast_expression -> unary_expression .)
    LESS            reduce using rule 124 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 124 (cast_expression -> unary_expression .)
    LESS_EQ         reduce using rule 124 (cast_expression -> unary_expression .)
    GREATER_EQ      reduce using rule 124 (cast_expression -> unary_expression .)
    SHIFT_LEFT      reduce using rule 124 (cast_expression -> unary_expression .)
    SHIFT_RIGHT     reduce using rule 124 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 124 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 124 (cast_expression -> unary_expression .)
    ASTERISK        reduce using rule 124 (cast_expression -> unary_expression .)
    DIV             reduce using rule 124 (cast_expression -> unary_expression .)
    MODULO          reduce using rule 124 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 124 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 124 (cast_expression -> unary_expression .)

  ! ASSIGN          [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_PLUS         [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_MINUS        [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_TIMES        [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_DIV          [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_MODULO       [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_SHIFT_LEFT   [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_SHIFT_RIGHT  [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_AMPERSAND    [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_CARET        [ reduce using rule 124 (cast_expression -> unary_expression .) ]
  ! EQ_PIPE         [ reduce using rule 124 (cast_expression -> unary_expression .) ]


state 102

    (54) compound_statement -> LBRACE declaration_list . RBRACE
    (55) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (40) declaration_list -> declaration_list . declaration
    (56) statement_list -> . statement
    (57) statement_list -> . statement_list statement
    (41) declaration -> . declaration_specifiers SEMICOLON
    (42) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RBRACE          shift and go to state 178
    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    storage_class_specifier shift and go to state 1
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    type_specifier  shift and go to state 15
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 114
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    declaration_specifiers shift and go to state 108
    declaration     shift and go to state 180
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    type_qualifier  shift and go to state 30
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    statement_list  shift and go to state 179
    expression      shift and go to state 107

state 103

    (60) statement -> compound_statement .

    RBRACE          reduce using rule 60 (statement -> compound_statement .)
    LBRACE          reduce using rule 60 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 60 (statement -> compound_statement .)
    IF              reduce using rule 60 (statement -> compound_statement .)
    SWITCH          reduce using rule 60 (statement -> compound_statement .)
    WHILE           reduce using rule 60 (statement -> compound_statement .)
    FOR             reduce using rule 60 (statement -> compound_statement .)
    DO              reduce using rule 60 (statement -> compound_statement .)
    CASE            reduce using rule 60 (statement -> compound_statement .)
    DEFAULT         reduce using rule 60 (statement -> compound_statement .)
    TREB_SUPER      reduce using rule 60 (statement -> compound_statement .)
    DOUBLE_PLUS     reduce using rule 60 (statement -> compound_statement .)
    DOUBLE_MINUS    reduce using rule 60 (statement -> compound_statement .)
    AMPERSAND       reduce using rule 60 (statement -> compound_statement .)
    ASTERISK        reduce using rule 60 (statement -> compound_statement .)
    PLUS            reduce using rule 60 (statement -> compound_statement .)
    MINUS           reduce using rule 60 (statement -> compound_statement .)
    TILDE           reduce using rule 60 (statement -> compound_statement .)
    EXCLAMATION     reduce using rule 60 (statement -> compound_statement .)
    RETURN          reduce using rule 60 (statement -> compound_statement .)
    BREAK           reduce using rule 60 (statement -> compound_statement .)
    CONTINUE        reduce using rule 60 (statement -> compound_statement .)
    ID              reduce using rule 60 (statement -> compound_statement .)
    INUMBER         reduce using rule 60 (statement -> compound_statement .)
    FNUMBER         reduce using rule 60 (statement -> compound_statement .)
    CHARACTER       reduce using rule 60 (statement -> compound_statement .)
    STRING          reduce using rule 60 (statement -> compound_statement .)
    LPAREN          reduce using rule 60 (statement -> compound_statement .)
    ELSE            reduce using rule 60 (statement -> compound_statement .)



state 104

    (77) iteration_statement -> FOR . LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> FOR . LPAREN expression_statement expression_statement RPAREN statement

    LPAREN          shift and go to state 181

  ! LPAREN          [ shift and go to state 181 ]


state 105

    (75) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 182



state 106

    (53) compound_statement -> LBRACE statement_list . RBRACE
    (57) statement_list -> statement_list . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RBRACE          shift and go to state 183
    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 184
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 107

    (68) expression_statement -> expression . SEMICOLON
    (81) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 186
    COMMA           shift and go to state 185



state 108

    (41) declaration -> declaration_specifiers . SEMICOLON
    (42) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (43) init_declarator_list -> . init_declarator
    (44) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (45) init_declarator -> . declarator
    (46) init_declarator -> . declarator ASSIGN initializer
    (33) declarator -> . direct_declarator
    (34) declarator -> . pointer declarator
    (148) direct_declarator -> . ID
    (149) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (150) direct_declarator -> . direct_declarator LPAREN RPAREN
    (151) direct_declarator -> . LPAREN declarator RPAREN
    (152) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (153) direct_declarator -> . direct_declarator LBRACKET RBRACKET
    (35) pointer -> . ASTERISK
    (36) pointer -> . ASTERISK type_qualifier_list
    (37) pointer -> . ASTERISK pointer
    (38) pointer -> . ASTERISK type_qualifier_list pointer

    SEMICOLON       shift and go to state 44
    ID              shift and go to state 26
    LPAREN          shift and go to state 5
    ASTERISK        shift and go to state 23

  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]
  ! ASTERISK        [ shift and go to state 23 ]

    direct_declarator shift and go to state 22
    init_declarator shift and go to state 45
    declarator      shift and go to state 161
    init_declarator_list shift and go to state 46
    pointer         shift and go to state 12

state 109

    (66) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 187



state 110

    (76) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 188



state 111

    (65) labeled_statement -> CASE . constant_expression COLON statement
    (94) constant_expression -> . conditional_expression
    (95) conditional_expression -> . logical_or_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    and_expression  shift and go to state 57
    conditional_expression shift and go to state 80
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    primary_expression shift and go to state 83
    logical_or_expression shift and go to state 67
    constant_expression shift and go to state 189
    relational_expression shift and go to state 64

state 112

    (67) expression_statement -> SEMICOLON .

    RBRACE          reduce using rule 67 (expression_statement -> SEMICOLON .)
    LBRACE          reduce using rule 67 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 67 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 67 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 67 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 67 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 67 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 67 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 67 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 67 (expression_statement -> SEMICOLON .)
    TREB_SUPER      reduce using rule 67 (expression_statement -> SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 67 (expression_statement -> SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 67 (expression_statement -> SEMICOLON .)
    AMPERSAND       reduce using rule 67 (expression_statement -> SEMICOLON .)
    ASTERISK        reduce using rule 67 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 67 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 67 (expression_statement -> SEMICOLON .)
    TILDE           reduce using rule 67 (expression_statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 67 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 67 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 67 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 67 (expression_statement -> SEMICOLON .)
    ID              reduce using rule 67 (expression_statement -> SEMICOLON .)
    INUMBER         reduce using rule 67 (expression_statement -> SEMICOLON .)
    FNUMBER         reduce using rule 67 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 67 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 67 (expression_statement -> SEMICOLON .)
    LPAREN          reduce using rule 67 (expression_statement -> SEMICOLON .)
    RPAREN          reduce using rule 67 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 67 (expression_statement -> SEMICOLON .)



state 113

    (71) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 190



state 114

    (56) statement_list -> statement .

    RBRACE          reduce using rule 56 (statement_list -> statement .)
    LBRACE          reduce using rule 56 (statement_list -> statement .)
    SEMICOLON       reduce using rule 56 (statement_list -> statement .)
    IF              reduce using rule 56 (statement_list -> statement .)
    SWITCH          reduce using rule 56 (statement_list -> statement .)
    WHILE           reduce using rule 56 (statement_list -> statement .)
    FOR             reduce using rule 56 (statement_list -> statement .)
    DO              reduce using rule 56 (statement_list -> statement .)
    CASE            reduce using rule 56 (statement_list -> statement .)
    DEFAULT         reduce using rule 56 (statement_list -> statement .)
    TREB_SUPER      reduce using rule 56 (statement_list -> statement .)
    DOUBLE_PLUS     reduce using rule 56 (statement_list -> statement .)
    DOUBLE_MINUS    reduce using rule 56 (statement_list -> statement .)
    AMPERSAND       reduce using rule 56 (statement_list -> statement .)
    ASTERISK        reduce using rule 56 (statement_list -> statement .)
    PLUS            reduce using rule 56 (statement_list -> statement .)
    MINUS           reduce using rule 56 (statement_list -> statement .)
    TILDE           reduce using rule 56 (statement_list -> statement .)
    EXCLAMATION     reduce using rule 56 (statement_list -> statement .)
    RETURN          reduce using rule 56 (statement_list -> statement .)
    BREAK           reduce using rule 56 (statement_list -> statement .)
    CONTINUE        reduce using rule 56 (statement_list -> statement .)
    ID              reduce using rule 56 (statement_list -> statement .)
    INUMBER         reduce using rule 56 (statement_list -> statement .)
    FNUMBER         reduce using rule 56 (statement_list -> statement .)
    CHARACTER       reduce using rule 56 (statement_list -> statement .)
    STRING          reduce using rule 56 (statement_list -> statement .)
    LPAREN          reduce using rule 56 (statement_list -> statement .)



state 115

    (39) declaration_list -> declaration .

    TYPEDEF         reduce using rule 39 (declaration_list -> declaration .)
    EXTERN          reduce using rule 39 (declaration_list -> declaration .)
    STATIC          reduce using rule 39 (declaration_list -> declaration .)
    AUTO            reduce using rule 39 (declaration_list -> declaration .)
    REGISTER        reduce using rule 39 (declaration_list -> declaration .)
    TREB_PAROUT     reduce using rule 39 (declaration_list -> declaration .)
    VOID            reduce using rule 39 (declaration_list -> declaration .)
    CHAR            reduce using rule 39 (declaration_list -> declaration .)
    INT             reduce using rule 39 (declaration_list -> declaration .)
    FLOAT           reduce using rule 39 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 39 (declaration_list -> declaration .)
    SHORT           reduce using rule 39 (declaration_list -> declaration .)
    LONG            reduce using rule 39 (declaration_list -> declaration .)
    SIGNED          reduce using rule 39 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 39 (declaration_list -> declaration .)
    CONST           reduce using rule 39 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 39 (declaration_list -> declaration .)
    RBRACE          reduce using rule 39 (declaration_list -> declaration .)
    LBRACE          reduce using rule 39 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 39 (declaration_list -> declaration .)
    IF              reduce using rule 39 (declaration_list -> declaration .)
    SWITCH          reduce using rule 39 (declaration_list -> declaration .)
    WHILE           reduce using rule 39 (declaration_list -> declaration .)
    FOR             reduce using rule 39 (declaration_list -> declaration .)
    DO              reduce using rule 39 (declaration_list -> declaration .)
    CASE            reduce using rule 39 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 39 (declaration_list -> declaration .)
    TREB_SUPER      reduce using rule 39 (declaration_list -> declaration .)
    DOUBLE_PLUS     reduce using rule 39 (declaration_list -> declaration .)
    DOUBLE_MINUS    reduce using rule 39 (declaration_list -> declaration .)
    AMPERSAND       reduce using rule 39 (declaration_list -> declaration .)
    ASTERISK        reduce using rule 39 (declaration_list -> declaration .)
    PLUS            reduce using rule 39 (declaration_list -> declaration .)
    MINUS           reduce using rule 39 (declaration_list -> declaration .)
    TILDE           reduce using rule 39 (declaration_list -> declaration .)
    EXCLAMATION     reduce using rule 39 (declaration_list -> declaration .)
    RETURN          reduce using rule 39 (declaration_list -> declaration .)
    BREAK           reduce using rule 39 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 39 (declaration_list -> declaration .)
    ID              reduce using rule 39 (declaration_list -> declaration .)
    INUMBER         reduce using rule 39 (declaration_list -> declaration .)
    FNUMBER         reduce using rule 39 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 39 (declaration_list -> declaration .)
    STRING          reduce using rule 39 (declaration_list -> declaration .)
    LPAREN          reduce using rule 39 (declaration_list -> declaration .)



state 116

    (64) statement -> jump_statement .

    RBRACE          reduce using rule 64 (statement -> jump_statement .)
    LBRACE          reduce using rule 64 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 64 (statement -> jump_statement .)
    IF              reduce using rule 64 (statement -> jump_statement .)
    SWITCH          reduce using rule 64 (statement -> jump_statement .)
    WHILE           reduce using rule 64 (statement -> jump_statement .)
    FOR             reduce using rule 64 (statement -> jump_statement .)
    DO              reduce using rule 64 (statement -> jump_statement .)
    CASE            reduce using rule 64 (statement -> jump_statement .)
    DEFAULT         reduce using rule 64 (statement -> jump_statement .)
    TREB_SUPER      reduce using rule 64 (statement -> jump_statement .)
    DOUBLE_PLUS     reduce using rule 64 (statement -> jump_statement .)
    DOUBLE_MINUS    reduce using rule 64 (statement -> jump_statement .)
    AMPERSAND       reduce using rule 64 (statement -> jump_statement .)
    ASTERISK        reduce using rule 64 (statement -> jump_statement .)
    PLUS            reduce using rule 64 (statement -> jump_statement .)
    MINUS           reduce using rule 64 (statement -> jump_statement .)
    TILDE           reduce using rule 64 (statement -> jump_statement .)
    EXCLAMATION     reduce using rule 64 (statement -> jump_statement .)
    RETURN          reduce using rule 64 (statement -> jump_statement .)
    BREAK           reduce using rule 64 (statement -> jump_statement .)
    CONTINUE        reduce using rule 64 (statement -> jump_statement .)
    ID              reduce using rule 64 (statement -> jump_statement .)
    INUMBER         reduce using rule 64 (statement -> jump_statement .)
    FNUMBER         reduce using rule 64 (statement -> jump_statement .)
    CHARACTER       reduce using rule 64 (statement -> jump_statement .)
    STRING          reduce using rule 64 (statement -> jump_statement .)
    LPAREN          reduce using rule 64 (statement -> jump_statement .)
    ELSE            reduce using rule 64 (statement -> jump_statement .)



state 117

    (162) super_statement -> TREB_SUPER . SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> TREB_SUPER . PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> TREB_SUPER . REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    SINGLE          shift and go to state 192
    PARALLEL        shift and go to state 193
    REDUCE          shift and go to state 191



state 118

    (74) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 194



state 119

    (79) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 195
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 120

    (62) statement -> selection_statement .

    RBRACE          reduce using rule 62 (statement -> selection_statement .)
    LBRACE          reduce using rule 62 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 62 (statement -> selection_statement .)
    IF              reduce using rule 62 (statement -> selection_statement .)
    SWITCH          reduce using rule 62 (statement -> selection_statement .)
    WHILE           reduce using rule 62 (statement -> selection_statement .)
    FOR             reduce using rule 62 (statement -> selection_statement .)
    DO              reduce using rule 62 (statement -> selection_statement .)
    CASE            reduce using rule 62 (statement -> selection_statement .)
    DEFAULT         reduce using rule 62 (statement -> selection_statement .)
    TREB_SUPER      reduce using rule 62 (statement -> selection_statement .)
    DOUBLE_PLUS     reduce using rule 62 (statement -> selection_statement .)
    DOUBLE_MINUS    reduce using rule 62 (statement -> selection_statement .)
    AMPERSAND       reduce using rule 62 (statement -> selection_statement .)
    ASTERISK        reduce using rule 62 (statement -> selection_statement .)
    PLUS            reduce using rule 62 (statement -> selection_statement .)
    MINUS           reduce using rule 62 (statement -> selection_statement .)
    TILDE           reduce using rule 62 (statement -> selection_statement .)
    EXCLAMATION     reduce using rule 62 (statement -> selection_statement .)
    RETURN          reduce using rule 62 (statement -> selection_statement .)
    BREAK           reduce using rule 62 (statement -> selection_statement .)
    CONTINUE        reduce using rule 62 (statement -> selection_statement .)
    ID              reduce using rule 62 (statement -> selection_statement .)
    INUMBER         reduce using rule 62 (statement -> selection_statement .)
    FNUMBER         reduce using rule 62 (statement -> selection_statement .)
    CHARACTER       reduce using rule 62 (statement -> selection_statement .)
    STRING          reduce using rule 62 (statement -> selection_statement .)
    LPAREN          reduce using rule 62 (statement -> selection_statement .)
    ELSE            reduce using rule 62 (statement -> selection_statement .)



state 121

    (80) expression -> assignment_expression .

    SEMICOLON       reduce using rule 80 (expression -> assignment_expression .)
    RPAREN          reduce using rule 80 (expression -> assignment_expression .)
    COMMA           reduce using rule 80 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 80 (expression -> assignment_expression .)



state 122

    (69) selection_statement -> IF . LPAREN expression RPAREN statement
    (70) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 196

  ! LPAREN          [ shift and go to state 196 ]


state 123

    (82) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 82 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 82 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 82 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> conditional_expression .)



state 124

    (133) unary_expression -> EXCLAMATION cast_expression .

    ASSIGN          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_PLUS         reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_MINUS        reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_TIMES        reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_DIV          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_MODULO       reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_AMPERSAND    reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_CARET        reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ_PIPE         reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    SEMICOLON       reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    COMMA           reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    RPAREN          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    COLON           reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    DOUBLE_PIPE     reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    PIPE            reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    CARET           reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    AMPERSAND       reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    EQ              reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    NOT_EQ          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    LESS            reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    GREATER         reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    LESS_EQ         reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    GREATER_EQ      reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    SHIFT_LEFT      reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    SHIFT_RIGHT     reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    PLUS            reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    MINUS           reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    ASTERISK        reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    DIV             reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    MODULO          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    RBRACE          reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)
    RBRACKET        reduce using rule 133 (unary_expression -> EXCLAMATION cast_expression .)



state 125

    (103) exclusive_or_expression -> exclusive_or_expression CARET . and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    and_expression  shift and go to state 197
    postfix_expression shift and go to state 61
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    relational_expression shift and go to state 64

state 126

    (131) unary_expression -> MINUS cast_expression .

    ASSIGN          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_PLUS         reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_MINUS        reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_TIMES        reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_DIV          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_MODULO       reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_AMPERSAND    reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_CARET        reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ_PIPE         reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    SEMICOLON       reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    COMMA           reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    RPAREN          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    COLON           reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    DOUBLE_PIPE     reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    PIPE            reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    CARET           reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    AMPERSAND       reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    EQ              reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    NOT_EQ          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    LESS            reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    GREATER         reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    LESS_EQ         reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    GREATER_EQ      reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    SHIFT_LEFT      reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    SHIFT_RIGHT     reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    PLUS            reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    MINUS           reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    ASTERISK        reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    DIV             reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    MODULO          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    RBRACE          reduce using rule 131 (unary_expression -> MINUS cast_expression .)
    RBRACKET        reduce using rule 131 (unary_expression -> MINUS cast_expression .)



state 127

    (105) and_expression -> and_expression AMPERSAND . equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    equality_expression shift and go to state 198
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    relational_expression shift and go to state 64

state 128

    (101) inclusive_or_expression -> inclusive_or_expression PIPE . exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    exclusive_or_expression shift and go to state 199
    postfix_expression shift and go to state 61
    additive_expression shift and go to state 71
    and_expression  shift and go to state 57
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    relational_expression shift and go to state 64

state 129

    (127) unary_expression -> DOUBLE_MINUS unary_expression .

    ASSIGN          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_PLUS         reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_MINUS        reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_TIMES        reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_DIV          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_MODULO       reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_SHIFT_LEFT   reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_AMPERSAND    reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_CARET        reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ_PIPE         reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    SEMICOLON       reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    COMMA           reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    RPAREN          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    COLON           reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    DOUBLE_PIPE     reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    PIPE            reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    CARET           reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    AMPERSAND       reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    EQ              reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    NOT_EQ          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    LESS            reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    GREATER         reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    LESS_EQ         reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    GREATER_EQ      reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    SHIFT_LEFT      reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    SHIFT_RIGHT     reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    PLUS            reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    MINUS           reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    ASTERISK        reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    DIV             reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    MODULO          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    RBRACE          reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)
    RBRACKET        reduce using rule 127 (unary_expression -> DOUBLE_MINUS unary_expression .)



state 130

    (139) postfix_expression -> postfix_expression DOUBLE_MINUS .

    ASSIGN          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_PLUS         reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_MINUS        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_TIMES        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_DIV          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_MODULO       reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_SHIFT_LEFT   reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_SHIFT_RIGHT  reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_AMPERSAND    reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_CARET        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ_PIPE         reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    SEMICOLON       reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    COMMA           reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    RPAREN          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    COLON           reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    DOUBLE_PIPE     reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    PIPE            reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    CARET           reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    AMPERSAND       reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    EQ              reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    NOT_EQ          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    LESS            reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    GREATER         reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    LESS_EQ         reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    GREATER_EQ      reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    SHIFT_LEFT      reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    SHIFT_RIGHT     reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    PLUS            reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    MINUS           reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    ASTERISK        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    DIV             reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    MODULO          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    LPAREN          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    LBRACKET        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    DOUBLE_PLUS     reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    DOUBLE_MINUS    reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    RBRACE          reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)
    RBRACKET        reduce using rule 139 (postfix_expression -> postfix_expression DOUBLE_MINUS .)



state 131

    (137) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 200
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 132

    (138) postfix_expression -> postfix_expression DOUBLE_PLUS .

    ASSIGN          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_PLUS         reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_MINUS        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_TIMES        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_DIV          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_MODULO       reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_SHIFT_LEFT   reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_SHIFT_RIGHT  reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_AMPERSAND    reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_CARET        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ_PIPE         reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    SEMICOLON       reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    COMMA           reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    RPAREN          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    COLON           reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    DOUBLE_PIPE     reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    PIPE            reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    CARET           reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    AMPERSAND       reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    EQ              reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    NOT_EQ          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    LESS            reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    GREATER         reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    LESS_EQ         reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    GREATER_EQ      reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    SHIFT_LEFT      reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    SHIFT_RIGHT     reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    PLUS            reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    MINUS           reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    ASTERISK        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    DIV             reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    MODULO          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    LPAREN          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    LBRACKET        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    DOUBLE_PLUS     reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    DOUBLE_MINUS    reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    RBRACE          reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)
    RBRACKET        reduce using rule 138 (postfix_expression -> postfix_expression DOUBLE_PLUS .)



state 133

    (135) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (136) postfix_expression -> postfix_expression LPAREN . RPAREN
    (160) argument_expression_list -> . assignment_expression
    (161) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RPAREN          shift and go to state 201
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 202
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    argument_expression_list shift and go to state 203
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 134

    (130) unary_expression -> PLUS cast_expression .

    ASSIGN          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_PLUS         reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_MINUS        reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_TIMES        reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_DIV          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_MODULO       reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_AMPERSAND    reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_CARET        reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ_PIPE         reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    SEMICOLON       reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    COMMA           reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    RPAREN          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    COLON           reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    DOUBLE_PIPE     reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    PIPE            reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    CARET           reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    AMPERSAND       reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    EQ              reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    NOT_EQ          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    LESS            reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    GREATER         reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    LESS_EQ         reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    GREATER_EQ      reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    SHIFT_LEFT      reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    SHIFT_RIGHT     reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    PLUS            reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    MINUS           reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    ASTERISK        reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    DIV             reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    MODULO          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    RBRACE          reduce using rule 130 (unary_expression -> PLUS cast_expression .)
    RBRACKET        reduce using rule 130 (unary_expression -> PLUS cast_expression .)



state 135

    (112) relational_expression -> relational_expression LESS_EQ . shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 204
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 136

    (111) relational_expression -> relational_expression GREATER . shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 205
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 137

    (110) relational_expression -> relational_expression LESS . shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 206
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 138

    (113) relational_expression -> relational_expression GREATER_EQ . shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 207
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 139

    (132) unary_expression -> TILDE cast_expression .

    ASSIGN          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_PLUS         reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_MINUS        reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_TIMES        reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_DIV          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_MODULO       reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_AMPERSAND    reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_CARET        reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ_PIPE         reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    SEMICOLON       reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    COMMA           reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    RPAREN          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    COLON           reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    DOUBLE_PIPE     reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    PIPE            reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    CARET           reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    AMPERSAND       reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    EQ              reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    NOT_EQ          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    LESS            reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    GREATER         reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    LESS_EQ         reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    GREATER_EQ      reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    SHIFT_LEFT      reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    SHIFT_RIGHT     reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    PLUS            reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    MINUS           reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    ASTERISK        reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    DIV             reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    MODULO          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    RBRACE          reduce using rule 132 (unary_expression -> TILDE cast_expression .)
    RBRACKET        reduce using rule 132 (unary_expression -> TILDE cast_expression .)



state 140

    (97) logical_or_expression -> logical_or_expression DOUBLE_PIPE . logical_and_expression
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    and_expression  shift and go to state 57
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 208
    equality_expression shift and go to state 77
    relational_expression shift and go to state 64

state 141

    (152) direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .

    LBRACE          reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SEMICOLON       reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    ASSIGN          reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 152 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)



state 142

    (147) string_literal -> string_literal STRING .

    ASSIGN          reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_PLUS         reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_MINUS        reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_TIMES        reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_DIV          reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_MODULO       reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_SHIFT_LEFT   reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_SHIFT_RIGHT  reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_AMPERSAND    reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_CARET        reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ_PIPE         reduce using rule 147 (string_literal -> string_literal STRING .)
    SEMICOLON       reduce using rule 147 (string_literal -> string_literal STRING .)
    COMMA           reduce using rule 147 (string_literal -> string_literal STRING .)
    RPAREN          reduce using rule 147 (string_literal -> string_literal STRING .)
    COLON           reduce using rule 147 (string_literal -> string_literal STRING .)
    DOUBLE_PIPE     reduce using rule 147 (string_literal -> string_literal STRING .)
    DOUBLE_AMPERSAND reduce using rule 147 (string_literal -> string_literal STRING .)
    PIPE            reduce using rule 147 (string_literal -> string_literal STRING .)
    CARET           reduce using rule 147 (string_literal -> string_literal STRING .)
    AMPERSAND       reduce using rule 147 (string_literal -> string_literal STRING .)
    EQ              reduce using rule 147 (string_literal -> string_literal STRING .)
    NOT_EQ          reduce using rule 147 (string_literal -> string_literal STRING .)
    LESS            reduce using rule 147 (string_literal -> string_literal STRING .)
    GREATER         reduce using rule 147 (string_literal -> string_literal STRING .)
    LESS_EQ         reduce using rule 147 (string_literal -> string_literal STRING .)
    GREATER_EQ      reduce using rule 147 (string_literal -> string_literal STRING .)
    SHIFT_LEFT      reduce using rule 147 (string_literal -> string_literal STRING .)
    SHIFT_RIGHT     reduce using rule 147 (string_literal -> string_literal STRING .)
    PLUS            reduce using rule 147 (string_literal -> string_literal STRING .)
    MINUS           reduce using rule 147 (string_literal -> string_literal STRING .)
    ASTERISK        reduce using rule 147 (string_literal -> string_literal STRING .)
    DIV             reduce using rule 147 (string_literal -> string_literal STRING .)
    MODULO          reduce using rule 147 (string_literal -> string_literal STRING .)
    STRING          reduce using rule 147 (string_literal -> string_literal STRING .)
    LPAREN          reduce using rule 147 (string_literal -> string_literal STRING .)
    LBRACKET        reduce using rule 147 (string_literal -> string_literal STRING .)
    DOUBLE_PLUS     reduce using rule 147 (string_literal -> string_literal STRING .)
    DOUBLE_MINUS    reduce using rule 147 (string_literal -> string_literal STRING .)
    RBRACE          reduce using rule 147 (string_literal -> string_literal STRING .)
    RBRACKET        reduce using rule 147 (string_literal -> string_literal STRING .)



state 143

    (129) unary_expression -> ASTERISK cast_expression .

    ASSIGN          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_PLUS         reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_MINUS        reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_TIMES        reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_DIV          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_MODULO       reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_AMPERSAND    reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_CARET        reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ_PIPE         reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    SEMICOLON       reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    COMMA           reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    RPAREN          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    COLON           reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    DOUBLE_PIPE     reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    PIPE            reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    CARET           reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    AMPERSAND       reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    EQ              reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    NOT_EQ          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    LESS            reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    GREATER         reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    LESS_EQ         reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    GREATER_EQ      reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    SHIFT_LEFT      reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    SHIFT_RIGHT     reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    PLUS            reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    MINUS           reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    ASTERISK        reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    DIV             reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    MODULO          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    RBRACE          reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)
    RBRACKET        reduce using rule 129 (unary_expression -> ASTERISK cast_expression .)



state 144

    (118) additive_expression -> additive_expression PLUS . mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    mult_expression shift and go to state 209
    cast_expression shift and go to state 66

state 145

    (119) additive_expression -> additive_expression MINUS . mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    mult_expression shift and go to state 210
    cast_expression shift and go to state 66

state 146

    (128) unary_expression -> AMPERSAND cast_expression .

    ASSIGN          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_PLUS         reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_MINUS        reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_TIMES        reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_DIV          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_MODULO       reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_SHIFT_LEFT   reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_AMPERSAND    reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_CARET        reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ_PIPE         reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    SEMICOLON       reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    COMMA           reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    RPAREN          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    COLON           reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    DOUBLE_PIPE     reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    PIPE            reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    CARET           reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    AMPERSAND       reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    EQ              reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    NOT_EQ          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    LESS            reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    GREATER         reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    LESS_EQ         reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    GREATER_EQ      reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    SHIFT_LEFT      reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    SHIFT_RIGHT     reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    PLUS            reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    MINUS           reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    ASTERISK        reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    DIV             reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    MODULO          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    RBRACE          reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)
    RBRACKET        reduce using rule 128 (unary_expression -> AMPERSAND cast_expression .)



state 147

    (126) unary_expression -> DOUBLE_PLUS unary_expression .

    ASSIGN          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_PLUS         reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_MINUS        reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_TIMES        reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_DIV          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_MODULO       reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_SHIFT_LEFT   reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_SHIFT_RIGHT  reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_AMPERSAND    reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_CARET        reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ_PIPE         reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    SEMICOLON       reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    COMMA           reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    RPAREN          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    COLON           reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    DOUBLE_PIPE     reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    DOUBLE_AMPERSAND reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    PIPE            reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    CARET           reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    AMPERSAND       reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    EQ              reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    NOT_EQ          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    LESS            reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    GREATER         reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    LESS_EQ         reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    GREATER_EQ      reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    SHIFT_LEFT      reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    SHIFT_RIGHT     reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    PLUS            reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    MINUS           reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    ASTERISK        reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    DIV             reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    MODULO          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    RBRACE          reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)
    RBRACKET        reduce using rule 126 (unary_expression -> DOUBLE_PLUS unary_expression .)



state 148

    (145) primary_expression -> LPAREN expression . RPAREN
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 211
    COMMA           shift and go to state 185



state 149

    (99) logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND . inclusive_or_expression
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    inclusive_or_expression shift and go to state 212
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    additive_expression shift and go to state 71
    and_expression  shift and go to state 57
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    relational_expression shift and go to state 64

state 150

    (116) shift_expression -> shift_expression SHIFT_RIGHT . additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    additive_expression shift and go to state 213

state 151

    (115) shift_expression -> shift_expression SHIFT_LEFT . additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    additive_expression shift and go to state 214

state 152

    (108) equality_expression -> equality_expression NOT_EQ . relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 215
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 153

    (107) equality_expression -> equality_expression EQ . relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 216
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83

state 154

    (122) mult_expression -> mult_expression DIV . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 217

state 155

    (121) mult_expression -> mult_expression ASTERISK . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 218

state 156

    (123) mult_expression -> mult_expression MODULO . cast_expression
    (124) cast_expression -> . unary_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    string_literal  shift and go to state 69
    unary_expression shift and go to state 53
    postfix_expression shift and go to state 61
    primary_expression shift and go to state 83
    cast_expression shift and go to state 219

state 157

    (149) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACE          reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACKET        reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMICOLON       reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ASSIGN          reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 149 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)



state 158

    (158) parameter_declaration -> declaration_specifiers declarator .

    RPAREN          reduce using rule 158 (parameter_declaration -> declaration_specifiers declarator .)
    COMMA           reduce using rule 158 (parameter_declaration -> declaration_specifiers declarator .)



state 159

    (155) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (157) parameter_list -> parameter_list COMMA . parameter_declaration
    (158) parameter_declaration -> . declaration_specifiers declarator
    (159) parameter_declaration -> . declaration_specifiers
    (8) declaration_specifiers -> . storage_class_specifier
    (9) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (10) declaration_specifiers -> . type_specifier
    (11) declaration_specifiers -> . type_specifier declaration_specifiers
    (12) declaration_specifiers -> . type_qualifier
    (13) declaration_specifiers -> . type_qualifier declaration_specifiers
    (23) storage_class_specifier -> . TYPEDEF
    (24) storage_class_specifier -> . EXTERN
    (25) storage_class_specifier -> . STATIC
    (26) storage_class_specifier -> . AUTO
    (27) storage_class_specifier -> . REGISTER
    (28) storage_class_specifier -> . TREB_PAROUT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . CHAR
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . SHORT
    (20) type_specifier -> . LONG
    (21) type_specifier -> . SIGNED
    (22) type_specifier -> . UNSIGNED
    (29) type_qualifier -> . CONST
    (30) type_qualifier -> . VOLATILE

    ELLIPSIS        shift and go to state 220
    TYPEDEF         shift and go to state 20
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 9
    AUTO            shift and go to state 21
    REGISTER        shift and go to state 16
    TREB_PAROUT     shift and go to state 2
    VOID            shift and go to state 6
    CHAR            shift and go to state 7
    INT             shift and go to state 28
    FLOAT           shift and go to state 3
    DOUBLE          shift and go to state 29
    SHORT           shift and go to state 8
    LONG            shift and go to state 10
    SIGNED          shift and go to state 31
    UNSIGNED        shift and go to state 17
    CONST           shift and go to state 4
    VOLATILE        shift and go to state 32


    storage_class_specifier shift and go to state 1
    type_specifier  shift and go to state 15
    parameter_declaration shift and go to state 221
    type_qualifier  shift and go to state 30
    declaration_specifiers shift and go to state 87

state 160

    (44) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 44 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 44 (init_declarator_list -> init_declarator_list COMMA init_declarator .)



state 161

    (45) init_declarator -> declarator .
    (46) init_declarator -> declarator . ASSIGN initializer

    SEMICOLON       reduce using rule 45 (init_declarator -> declarator .)
    COMMA           reduce using rule 45 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 94



state 162

    (46) init_declarator -> declarator ASSIGN initializer .

    SEMICOLON       reduce using rule 46 (init_declarator -> declarator ASSIGN initializer .)
    COMMA           reduce using rule 46 (init_declarator -> declarator ASSIGN initializer .)



state 163

    (47) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 47 (initializer -> assignment_expression .)
    COMMA           reduce using rule 47 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 47 (initializer -> assignment_expression .)



state 164

    (48) initializer -> LBRACE . initializer_list RBRACE
    (49) initializer -> LBRACE . initializer_list COMMA RBRACE
    (50) initializer_list -> . initializer
    (51) initializer_list -> . initializer_list COMMA initializer
    (47) initializer -> . assignment_expression
    (48) initializer -> . LBRACE initializer_list RBRACE
    (49) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    LBRACE          shift and go to state 164
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! LBRACE          [ shift and go to state 164 ]

    relational_expression shift and go to state 64
    assignment_expression shift and go to state 163
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    initializer_list shift and go to state 223
    additive_expression shift and go to state 71
    postfix_expression shift and go to state 61
    initializer     shift and go to state 222
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 165

    (72) jump_statement -> RETURN SEMICOLON .

    RBRACE          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    TREB_SUPER      reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    AMPERSAND       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    ASTERISK        reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    EXCLAMATION     reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    ID              reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    INUMBER         reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    FNUMBER         reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 72 (jump_statement -> RETURN SEMICOLON .)



state 166

    (73) jump_statement -> RETURN expression . SEMICOLON
    (81) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 224
    COMMA           shift and go to state 185



state 167

    (90) assignment_expression -> unary_expression EQ_SHIFT_RIGHT . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 225
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 168

    (89) assignment_expression -> unary_expression EQ_SHIFT_LEFT . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 226
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 169

    (86) assignment_expression -> unary_expression EQ_TIMES . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 227
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 170

    (84) assignment_expression -> unary_expression EQ_PLUS . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 228
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 171

    (87) assignment_expression -> unary_expression EQ_DIV . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 229
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 172

    (92) assignment_expression -> unary_expression EQ_CARET . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 230
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 173

    (85) assignment_expression -> unary_expression EQ_MINUS . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 231
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 174

    (91) assignment_expression -> unary_expression EQ_AMPERSAND . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 232
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 175

    (93) assignment_expression -> unary_expression EQ_PIPE . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 233
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 176

    (88) assignment_expression -> unary_expression EQ_MODULO . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 234
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 177

    (83) assignment_expression -> unary_expression ASSIGN . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 235
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 178

    (54) compound_statement -> LBRACE declaration_list RBRACE .

    $               reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    TYPEDEF         reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    EXTERN          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    STATIC          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    AUTO            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    REGISTER        reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    TREB_PAROUT     reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOID            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT             reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    SHORT           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    LONG            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    SIGNED          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    UNSIGNED        reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    ID              reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    ASTERISK        reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    BLOCK           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONST           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    VOLATILE        reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    RBRACE          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMICOLON       reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    SWITCH          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    DO              reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    CASE            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEFAULT         reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    TREB_SUPER      reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE_PLUS     reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    DOUBLE_MINUS    reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    AMPERSAND       reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    PLUS            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    MINUS           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    TILDE           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    EXCLAMATION     reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONTINUE        reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    INUMBER         reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    FNUMBER         reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHARACTER       reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    STRING          reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 54 (compound_statement -> LBRACE declaration_list RBRACE .)



state 179

    (55) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (57) statement_list -> statement_list . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RBRACE          shift and go to state 236
    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 184
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 180

    (40) declaration_list -> declaration_list declaration .

    TYPEDEF         reduce using rule 40 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 40 (declaration_list -> declaration_list declaration .)
    TREB_PAROUT     reduce using rule 40 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 40 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 40 (declaration_list -> declaration_list declaration .)
    RBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 40 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 40 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 40 (declaration_list -> declaration_list declaration .)
    TREB_SUPER      reduce using rule 40 (declaration_list -> declaration_list declaration .)
    DOUBLE_PLUS     reduce using rule 40 (declaration_list -> declaration_list declaration .)
    DOUBLE_MINUS    reduce using rule 40 (declaration_list -> declaration_list declaration .)
    AMPERSAND       reduce using rule 40 (declaration_list -> declaration_list declaration .)
    ASTERISK        reduce using rule 40 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 40 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    TILDE           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    EXCLAMATION     reduce using rule 40 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 40 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 40 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 40 (declaration_list -> declaration_list declaration .)
    INUMBER         reduce using rule 40 (declaration_list -> declaration_list declaration .)
    FNUMBER         reduce using rule 40 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 40 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 40 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 40 (declaration_list -> declaration_list declaration .)



state 181

    (77) iteration_statement -> FOR LPAREN . expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> FOR LPAREN . expression_statement expression_statement RPAREN statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    SEMICOLON       shift and go to state 112
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    expression_statement shift and go to state 237
    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 107
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 182

    (75) jump_statement -> CONTINUE SEMICOLON .

    RBRACE          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    TREB_SUPER      reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    AMPERSAND       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    ASTERISK        reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    FNUMBER         reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 75 (jump_statement -> CONTINUE SEMICOLON .)



state 183

    (53) compound_statement -> LBRACE statement_list RBRACE .

    $               reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    TYPEDEF         reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    EXTERN          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    STATIC          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    AUTO            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    REGISTER        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    TREB_PAROUT     reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    VOID            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SHORT           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LONG            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SIGNED          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    UNSIGNED        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    ASTERISK        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BLOCK           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CONST           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    VOLATILE        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    TREB_SUPER      reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE_PLUS     reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE_MINUS    reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    AMPERSAND       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    TILDE           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    EXCLAMATION     reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    INUMBER         reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    FNUMBER         reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    CHARACTER       reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 53 (compound_statement -> LBRACE statement_list RBRACE .)



state 184

    (57) statement_list -> statement_list statement .

    RBRACE          reduce using rule 57 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 57 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 57 (statement_list -> statement_list statement .)
    IF              reduce using rule 57 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 57 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 57 (statement_list -> statement_list statement .)
    FOR             reduce using rule 57 (statement_list -> statement_list statement .)
    DO              reduce using rule 57 (statement_list -> statement_list statement .)
    CASE            reduce using rule 57 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 57 (statement_list -> statement_list statement .)
    TREB_SUPER      reduce using rule 57 (statement_list -> statement_list statement .)
    DOUBLE_PLUS     reduce using rule 57 (statement_list -> statement_list statement .)
    DOUBLE_MINUS    reduce using rule 57 (statement_list -> statement_list statement .)
    AMPERSAND       reduce using rule 57 (statement_list -> statement_list statement .)
    ASTERISK        reduce using rule 57 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 57 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 57 (statement_list -> statement_list statement .)
    TILDE           reduce using rule 57 (statement_list -> statement_list statement .)
    EXCLAMATION     reduce using rule 57 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 57 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 57 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 57 (statement_list -> statement_list statement .)
    ID              reduce using rule 57 (statement_list -> statement_list statement .)
    INUMBER         reduce using rule 57 (statement_list -> statement_list statement .)
    FNUMBER         reduce using rule 57 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 57 (statement_list -> statement_list statement .)
    STRING          reduce using rule 57 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 57 (statement_list -> statement_list statement .)



state 185

    (81) expression -> expression COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 238
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 186

    (68) expression_statement -> expression SEMICOLON .

    RBRACE          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    TREB_SUPER      reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    AMPERSAND       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    ASTERISK        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    TILDE           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    INUMBER         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    FNUMBER         reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    RPAREN          reduce using rule 68 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 68 (expression_statement -> expression SEMICOLON .)



state 187

    (66) labeled_statement -> DEFAULT COLON . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 239
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 188

    (76) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 240
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 189

    (65) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 241



state 190

    (71) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 242
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 191

    (164) super_statement -> TREB_SUPER REDUCE . INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    INPUT           shift and go to state 243



state 192

    (162) super_statement -> TREB_SUPER SINGLE . INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    INPUT           shift and go to state 244



state 193

    (163) super_statement -> TREB_SUPER PARALLEL . INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    INPUT           shift and go to state 245



state 194

    (74) jump_statement -> BREAK SEMICOLON .

    RBRACE          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    TREB_SUPER      reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    AMPERSAND       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    ASTERISK        reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    FNUMBER         reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 74 (jump_statement -> BREAK SEMICOLON .)



state 195

    (79) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 246



state 196

    (69) selection_statement -> IF LPAREN . expression RPAREN statement
    (70) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 247
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 197

    (103) exclusive_or_expression -> exclusive_or_expression CARET and_expression .
    (105) and_expression -> and_expression . AMPERSAND equality_expression

    SEMICOLON       reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COMMA           reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RPAREN          reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COLON           reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    DOUBLE_PIPE     reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    DOUBLE_AMPERSAND reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    PIPE            reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    CARET           reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RBRACE          reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RBRACKET        reduce using rule 103 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AMPERSAND       shift and go to state 127



state 198

    (105) and_expression -> and_expression AMPERSAND equality_expression .
    (107) equality_expression -> equality_expression . EQ relational_expression
    (108) equality_expression -> equality_expression . NOT_EQ relational_expression

    SEMICOLON       reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    COMMA           reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    RPAREN          reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    COLON           reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    DOUBLE_PIPE     reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    DOUBLE_AMPERSAND reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    PIPE            reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    CARET           reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    AMPERSAND       reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    RBRACE          reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    RBRACKET        reduce using rule 105 (and_expression -> and_expression AMPERSAND equality_expression .)
    EQ              shift and go to state 153
    NOT_EQ          shift and go to state 152



state 199

    (101) inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .
    (103) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    SEMICOLON       reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COMMA           reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RPAREN          reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    COLON           reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    DOUBLE_PIPE     reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    DOUBLE_AMPERSAND reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    PIPE            reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RBRACE          reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    RBRACKET        reduce using rule 101 (inclusive_or_expression -> inclusive_or_expression PIPE exclusive_or_expression .)
    CARET           shift and go to state 125



state 200

    (137) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (81) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 248
    COMMA           shift and go to state 185



state 201

    (136) postfix_expression -> postfix_expression LPAREN RPAREN .

    ASSIGN          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_DIV          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_MODULO       reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_SHIFT_LEFT   reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_SHIFT_RIGHT  reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_AMPERSAND    reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_CARET        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ_PIPE         reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PIPE            reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CARET           reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AMPERSAND       reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS            reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER         reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LESS_EQ         reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SHIFT_LEFT      reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SHIFT_RIGHT     reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASTERISK        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODULO          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACKET        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_PLUS     reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DOUBLE_MINUS    reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 136 (postfix_expression -> postfix_expression LPAREN RPAREN .)



state 202

    (160) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 160 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 160 (argument_expression_list -> assignment_expression .)



state 203

    (135) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (161) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 249
    COMMA           shift and go to state 250



state 204

    (112) relational_expression -> relational_expression LESS_EQ shift_expression .
    (115) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (116) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    SEMICOLON       reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    COMMA           reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    RPAREN          reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    COLON           reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    DOUBLE_PIPE     reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    DOUBLE_AMPERSAND reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    PIPE            reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    CARET           reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    AMPERSAND       reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    EQ              reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    NOT_EQ          reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    LESS            reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    GREATER         reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    LESS_EQ         reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    GREATER_EQ      reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    RBRACE          reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    RBRACKET        reduce using rule 112 (relational_expression -> relational_expression LESS_EQ shift_expression .)
    SHIFT_LEFT      shift and go to state 151
    SHIFT_RIGHT     shift and go to state 150



state 205

    (111) relational_expression -> relational_expression GREATER shift_expression .
    (115) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (116) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    SEMICOLON       reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    RPAREN          reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    DOUBLE_PIPE     reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    DOUBLE_AMPERSAND reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    PIPE            reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    CARET           reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    AMPERSAND       reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    EQ              reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    NOT_EQ          reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS            reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS_EQ         reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER_EQ      reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    RBRACE          reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    RBRACKET        reduce using rule 111 (relational_expression -> relational_expression GREATER shift_expression .)
    SHIFT_LEFT      shift and go to state 151
    SHIFT_RIGHT     shift and go to state 150



state 206

    (110) relational_expression -> relational_expression LESS shift_expression .
    (115) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (116) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    SEMICOLON       reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    RPAREN          reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    DOUBLE_PIPE     reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    DOUBLE_AMPERSAND reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    PIPE            reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    CARET           reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    AMPERSAND       reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    EQ              reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    NOT_EQ          reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    LESS            reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    LESS_EQ         reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER_EQ      reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    RBRACE          reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    RBRACKET        reduce using rule 110 (relational_expression -> relational_expression LESS shift_expression .)
    SHIFT_LEFT      shift and go to state 151
    SHIFT_RIGHT     shift and go to state 150



state 207

    (113) relational_expression -> relational_expression GREATER_EQ shift_expression .
    (115) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (116) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    SEMICOLON       reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    COMMA           reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    RPAREN          reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    COLON           reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    DOUBLE_PIPE     reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    DOUBLE_AMPERSAND reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    PIPE            reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    CARET           reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    AMPERSAND       reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    EQ              reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    NOT_EQ          reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    LESS            reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    GREATER         reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    LESS_EQ         reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    GREATER_EQ      reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    RBRACE          reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    RBRACKET        reduce using rule 113 (relational_expression -> relational_expression GREATER_EQ shift_expression .)
    SHIFT_LEFT      shift and go to state 151
    SHIFT_RIGHT     shift and go to state 150



state 208

    (97) logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .
    (99) logical_and_expression -> logical_and_expression . DOUBLE_AMPERSAND inclusive_or_expression

    SEMICOLON       reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    COMMA           reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RPAREN          reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    COLON           reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    DOUBLE_PIPE     reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RBRACE          reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    RBRACKET        reduce using rule 97 (logical_or_expression -> logical_or_expression DOUBLE_PIPE logical_and_expression .)
    DOUBLE_AMPERSAND shift and go to state 149



state 209

    (118) additive_expression -> additive_expression PLUS mult_expression .
    (121) mult_expression -> mult_expression . ASTERISK cast_expression
    (122) mult_expression -> mult_expression . DIV cast_expression
    (123) mult_expression -> mult_expression . MODULO cast_expression

    SEMICOLON       reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    COMMA           reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    RPAREN          reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    COLON           reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    DOUBLE_PIPE     reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    PIPE            reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    CARET           reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    AMPERSAND       reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    EQ              reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    NOT_EQ          reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS            reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER         reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    LESS_EQ         reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    GREATER_EQ      reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    SHIFT_LEFT      reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    SHIFT_RIGHT     reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    PLUS            reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    MINUS           reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    RBRACE          reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    RBRACKET        reduce using rule 118 (additive_expression -> additive_expression PLUS mult_expression .)
    ASTERISK        shift and go to state 155
    DIV             shift and go to state 154
    MODULO          shift and go to state 156



state 210

    (119) additive_expression -> additive_expression MINUS mult_expression .
    (121) mult_expression -> mult_expression . ASTERISK cast_expression
    (122) mult_expression -> mult_expression . DIV cast_expression
    (123) mult_expression -> mult_expression . MODULO cast_expression

    SEMICOLON       reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    COMMA           reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    RPAREN          reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    COLON           reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    DOUBLE_PIPE     reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    DOUBLE_AMPERSAND reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    PIPE            reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    CARET           reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    AMPERSAND       reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    EQ              reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    NOT_EQ          reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS            reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER         reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    LESS_EQ         reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    GREATER_EQ      reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    SHIFT_LEFT      reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    SHIFT_RIGHT     reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    PLUS            reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    MINUS           reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    RBRACE          reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    RBRACKET        reduce using rule 119 (additive_expression -> additive_expression MINUS mult_expression .)
    ASTERISK        shift and go to state 155
    DIV             shift and go to state 154
    MODULO          shift and go to state 156



state 211

    (145) primary_expression -> LPAREN expression RPAREN .

    ASSIGN          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_SHIFT_LEFT   reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_SHIFT_RIGHT  reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_AMPERSAND    reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_CARET        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ_PIPE         reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    PIPE            reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    CARET           reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    SHIFT_LEFT      reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    SHIFT_RIGHT     reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_PLUS     reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    DOUBLE_MINUS    reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 145 (primary_expression -> LPAREN expression RPAREN .)



state 212

    (99) logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .
    (101) inclusive_or_expression -> inclusive_or_expression . PIPE exclusive_or_expression

    SEMICOLON       reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    COMMA           reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    RPAREN          reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    COLON           reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    DOUBLE_PIPE     reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    DOUBLE_AMPERSAND reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    RBRACE          reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    RBRACKET        reduce using rule 99 (logical_and_expression -> logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression .)
    PIPE            shift and go to state 128



state 213

    (116) shift_expression -> shift_expression SHIFT_RIGHT additive_expression .
    (118) additive_expression -> additive_expression . PLUS mult_expression
    (119) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    COMMA           reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    RPAREN          reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    COLON           reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    DOUBLE_PIPE     reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    PIPE            reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    CARET           reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    AMPERSAND       reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    EQ              reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    NOT_EQ          reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LESS            reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GREATER         reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LESS_EQ         reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GREATER_EQ      reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SHIFT_LEFT      reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SHIFT_RIGHT     reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    RBRACE          reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    RBRACKET        reduce using rule 116 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145



state 214

    (115) shift_expression -> shift_expression SHIFT_LEFT additive_expression .
    (118) additive_expression -> additive_expression . PLUS mult_expression
    (119) additive_expression -> additive_expression . MINUS mult_expression

    SEMICOLON       reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    COMMA           reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    RPAREN          reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    COLON           reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    DOUBLE_PIPE     reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    DOUBLE_AMPERSAND reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    PIPE            reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    CARET           reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    AMPERSAND       reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    EQ              reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    NOT_EQ          reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LESS            reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GREATER         reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LESS_EQ         reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GREATER_EQ      reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SHIFT_LEFT      reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SHIFT_RIGHT     reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    RBRACE          reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    RBRACKET        reduce using rule 115 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    PLUS            shift and go to state 144
    MINUS           shift and go to state 145



state 215

    (108) equality_expression -> equality_expression NOT_EQ relational_expression .
    (110) relational_expression -> relational_expression . LESS shift_expression
    (111) relational_expression -> relational_expression . GREATER shift_expression
    (112) relational_expression -> relational_expression . LESS_EQ shift_expression
    (113) relational_expression -> relational_expression . GREATER_EQ shift_expression

    SEMICOLON       reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COLON           reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    PIPE            reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    CARET           reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    AMPERSAND       reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    EQ              reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACE          reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACKET        reduce using rule 108 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LESS            shift and go to state 137
    GREATER         shift and go to state 136
    LESS_EQ         shift and go to state 135
    GREATER_EQ      shift and go to state 138



state 216

    (107) equality_expression -> equality_expression EQ relational_expression .
    (110) relational_expression -> relational_expression . LESS shift_expression
    (111) relational_expression -> relational_expression . GREATER shift_expression
    (112) relational_expression -> relational_expression . LESS_EQ shift_expression
    (113) relational_expression -> relational_expression . GREATER_EQ shift_expression

    SEMICOLON       reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_PIPE     reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    DOUBLE_AMPERSAND reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    PIPE            reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    CARET           reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    AMPERSAND       reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    EQ              reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    NOT_EQ          reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 107 (equality_expression -> equality_expression EQ relational_expression .)
    LESS            shift and go to state 137
    GREATER         shift and go to state 136
    LESS_EQ         shift and go to state 135
    GREATER_EQ      shift and go to state 138



state 217

    (122) mult_expression -> mult_expression DIV cast_expression .

    SEMICOLON       reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    COMMA           reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    RPAREN          reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    COLON           reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    DOUBLE_PIPE     reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    PIPE            reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    CARET           reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    AMPERSAND       reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    EQ              reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    NOT_EQ          reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    LESS            reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    GREATER         reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    LESS_EQ         reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    GREATER_EQ      reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    SHIFT_LEFT      reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    SHIFT_RIGHT     reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    PLUS            reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    MINUS           reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    ASTERISK        reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    DIV             reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    MODULO          reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    RBRACE          reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)
    RBRACKET        reduce using rule 122 (mult_expression -> mult_expression DIV cast_expression .)



state 218

    (121) mult_expression -> mult_expression ASTERISK cast_expression .

    SEMICOLON       reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    COMMA           reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    RPAREN          reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    COLON           reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    DOUBLE_PIPE     reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    PIPE            reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    CARET           reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    AMPERSAND       reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    EQ              reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    NOT_EQ          reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    LESS            reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    GREATER         reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    LESS_EQ         reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    GREATER_EQ      reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    SHIFT_LEFT      reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    SHIFT_RIGHT     reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    PLUS            reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    MINUS           reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    ASTERISK        reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    DIV             reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    MODULO          reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    RBRACE          reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)
    RBRACKET        reduce using rule 121 (mult_expression -> mult_expression ASTERISK cast_expression .)



state 219

    (123) mult_expression -> mult_expression MODULO cast_expression .

    SEMICOLON       reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    COMMA           reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    RPAREN          reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    COLON           reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    DOUBLE_PIPE     reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    DOUBLE_AMPERSAND reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    PIPE            reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    CARET           reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    AMPERSAND       reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    EQ              reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    NOT_EQ          reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    LESS            reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    GREATER         reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    LESS_EQ         reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    GREATER_EQ      reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    SHIFT_LEFT      reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    SHIFT_RIGHT     reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    PLUS            reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    MINUS           reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    ASTERISK        reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    DIV             reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    MODULO          reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    RBRACE          reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)
    RBRACKET        reduce using rule 123 (mult_expression -> mult_expression MODULO cast_expression .)



state 220

    (155) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 155 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)



state 221

    (157) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 157 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 157 (parameter_list -> parameter_list COMMA parameter_declaration .)



state 222

    (50) initializer_list -> initializer .

    RBRACE          reduce using rule 50 (initializer_list -> initializer .)
    COMMA           reduce using rule 50 (initializer_list -> initializer .)



state 223

    (48) initializer -> LBRACE initializer_list . RBRACE
    (49) initializer -> LBRACE initializer_list . COMMA RBRACE
    (51) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 252
    COMMA           shift and go to state 251

  ! COMMA           [ shift and go to state 251 ]


state 224

    (73) jump_statement -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    TREB_SUPER      reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    AMPERSAND       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    ASTERISK        reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    EXCLAMATION     reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    INUMBER         reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    FNUMBER         reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 73 (jump_statement -> RETURN expression SEMICOLON .)



state 225

    (90) assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .

    SEMICOLON       reduce using rule 90 (assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .)
    COMMA           reduce using rule 90 (assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .)
    RPAREN          reduce using rule 90 (assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .)
    RBRACE          reduce using rule 90 (assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .)
    RBRACKET        reduce using rule 90 (assignment_expression -> unary_expression EQ_SHIFT_RIGHT assignment_expression .)



state 226

    (89) assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .

    SEMICOLON       reduce using rule 89 (assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .)
    COMMA           reduce using rule 89 (assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .)
    RPAREN          reduce using rule 89 (assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .)
    RBRACE          reduce using rule 89 (assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .)
    RBRACKET        reduce using rule 89 (assignment_expression -> unary_expression EQ_SHIFT_LEFT assignment_expression .)



state 227

    (86) assignment_expression -> unary_expression EQ_TIMES assignment_expression .

    SEMICOLON       reduce using rule 86 (assignment_expression -> unary_expression EQ_TIMES assignment_expression .)
    COMMA           reduce using rule 86 (assignment_expression -> unary_expression EQ_TIMES assignment_expression .)
    RPAREN          reduce using rule 86 (assignment_expression -> unary_expression EQ_TIMES assignment_expression .)
    RBRACE          reduce using rule 86 (assignment_expression -> unary_expression EQ_TIMES assignment_expression .)
    RBRACKET        reduce using rule 86 (assignment_expression -> unary_expression EQ_TIMES assignment_expression .)



state 228

    (84) assignment_expression -> unary_expression EQ_PLUS assignment_expression .

    SEMICOLON       reduce using rule 84 (assignment_expression -> unary_expression EQ_PLUS assignment_expression .)
    COMMA           reduce using rule 84 (assignment_expression -> unary_expression EQ_PLUS assignment_expression .)
    RPAREN          reduce using rule 84 (assignment_expression -> unary_expression EQ_PLUS assignment_expression .)
    RBRACE          reduce using rule 84 (assignment_expression -> unary_expression EQ_PLUS assignment_expression .)
    RBRACKET        reduce using rule 84 (assignment_expression -> unary_expression EQ_PLUS assignment_expression .)



state 229

    (87) assignment_expression -> unary_expression EQ_DIV assignment_expression .

    SEMICOLON       reduce using rule 87 (assignment_expression -> unary_expression EQ_DIV assignment_expression .)
    COMMA           reduce using rule 87 (assignment_expression -> unary_expression EQ_DIV assignment_expression .)
    RPAREN          reduce using rule 87 (assignment_expression -> unary_expression EQ_DIV assignment_expression .)
    RBRACE          reduce using rule 87 (assignment_expression -> unary_expression EQ_DIV assignment_expression .)
    RBRACKET        reduce using rule 87 (assignment_expression -> unary_expression EQ_DIV assignment_expression .)



state 230

    (92) assignment_expression -> unary_expression EQ_CARET assignment_expression .

    SEMICOLON       reduce using rule 92 (assignment_expression -> unary_expression EQ_CARET assignment_expression .)
    COMMA           reduce using rule 92 (assignment_expression -> unary_expression EQ_CARET assignment_expression .)
    RPAREN          reduce using rule 92 (assignment_expression -> unary_expression EQ_CARET assignment_expression .)
    RBRACE          reduce using rule 92 (assignment_expression -> unary_expression EQ_CARET assignment_expression .)
    RBRACKET        reduce using rule 92 (assignment_expression -> unary_expression EQ_CARET assignment_expression .)



state 231

    (85) assignment_expression -> unary_expression EQ_MINUS assignment_expression .

    SEMICOLON       reduce using rule 85 (assignment_expression -> unary_expression EQ_MINUS assignment_expression .)
    COMMA           reduce using rule 85 (assignment_expression -> unary_expression EQ_MINUS assignment_expression .)
    RPAREN          reduce using rule 85 (assignment_expression -> unary_expression EQ_MINUS assignment_expression .)
    RBRACE          reduce using rule 85 (assignment_expression -> unary_expression EQ_MINUS assignment_expression .)
    RBRACKET        reduce using rule 85 (assignment_expression -> unary_expression EQ_MINUS assignment_expression .)



state 232

    (91) assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .

    SEMICOLON       reduce using rule 91 (assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .)
    COMMA           reduce using rule 91 (assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .)
    RPAREN          reduce using rule 91 (assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .)
    RBRACE          reduce using rule 91 (assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .)
    RBRACKET        reduce using rule 91 (assignment_expression -> unary_expression EQ_AMPERSAND assignment_expression .)



state 233

    (93) assignment_expression -> unary_expression EQ_PIPE assignment_expression .

    SEMICOLON       reduce using rule 93 (assignment_expression -> unary_expression EQ_PIPE assignment_expression .)
    COMMA           reduce using rule 93 (assignment_expression -> unary_expression EQ_PIPE assignment_expression .)
    RPAREN          reduce using rule 93 (assignment_expression -> unary_expression EQ_PIPE assignment_expression .)
    RBRACE          reduce using rule 93 (assignment_expression -> unary_expression EQ_PIPE assignment_expression .)
    RBRACKET        reduce using rule 93 (assignment_expression -> unary_expression EQ_PIPE assignment_expression .)



state 234

    (88) assignment_expression -> unary_expression EQ_MODULO assignment_expression .

    SEMICOLON       reduce using rule 88 (assignment_expression -> unary_expression EQ_MODULO assignment_expression .)
    COMMA           reduce using rule 88 (assignment_expression -> unary_expression EQ_MODULO assignment_expression .)
    RPAREN          reduce using rule 88 (assignment_expression -> unary_expression EQ_MODULO assignment_expression .)
    RBRACE          reduce using rule 88 (assignment_expression -> unary_expression EQ_MODULO assignment_expression .)
    RBRACKET        reduce using rule 88 (assignment_expression -> unary_expression EQ_MODULO assignment_expression .)



state 235

    (83) assignment_expression -> unary_expression ASSIGN assignment_expression .

    SEMICOLON       reduce using rule 83 (assignment_expression -> unary_expression ASSIGN assignment_expression .)
    COMMA           reduce using rule 83 (assignment_expression -> unary_expression ASSIGN assignment_expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> unary_expression ASSIGN assignment_expression .)
    RBRACE          reduce using rule 83 (assignment_expression -> unary_expression ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> unary_expression ASSIGN assignment_expression .)



state 236

    (55) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    $               reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TYPEDEF         reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    EXTERN          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STATIC          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AUTO            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    REGISTER        reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TREB_PAROUT     reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOID            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT             reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SHORT           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LONG            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SIGNED          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    UNSIGNED        reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ID              reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ASTERISK        reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BLOCK           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONST           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    VOLATILE        reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RBRACE          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMICOLON       reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SWITCH          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DO              reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CASE            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEFAULT         reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TREB_SUPER      reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE_PLUS     reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DOUBLE_MINUS    reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    AMPERSAND       reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PLUS            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MINUS           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    TILDE           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    EXCLAMATION     reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONTINUE        reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INUMBER         reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FNUMBER         reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHARACTER       reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STRING          reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 55 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)



state 237

    (77) iteration_statement -> FOR LPAREN expression_statement . expression_statement expression RPAREN statement
    (78) iteration_statement -> FOR LPAREN expression_statement . expression_statement RPAREN statement
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    SEMICOLON       shift and go to state 112
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    expression_statement shift and go to state 253
    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 107
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 238

    (81) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 81 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 81 (expression -> expression COMMA assignment_expression .)



state 239

    (66) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    TREB_SUPER      reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE_PLUS     reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE_MINUS    reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    AMPERSAND       reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    ASTERISK        reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    TILDE           reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    EXCLAMATION     reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    ID              reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    INUMBER         reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    FNUMBER         reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    CHARACTER       reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    STRING          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 66 (labeled_statement -> DEFAULT COLON statement .)



state 240

    (76) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 254
    COMMA           shift and go to state 185



state 241

    (65) labeled_statement -> CASE constant_expression COLON . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 255
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 242

    (71) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 256
    COMMA           shift and go to state 185



state 243

    (164) super_statement -> TREB_SUPER REDUCE INPUT . LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 257



state 244

    (162) super_statement -> TREB_SUPER SINGLE INPUT . LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 258



state 245

    (163) super_statement -> TREB_SUPER PARALLEL INPUT . LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 259



state 246

    (79) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 260



state 247

    (69) selection_statement -> IF LPAREN expression . RPAREN statement
    (70) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 261
    COMMA           shift and go to state 185

  ! RPAREN          [ shift and go to state 261 ]


state 248

    (137) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_SHIFT_LEFT   reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_SHIFT_RIGHT  reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_AMPERSAND    reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_CARET        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ_PIPE         reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CARET           reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS            reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SHIFT_LEFT      reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SHIFT_RIGHT     reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASTERISK        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_PLUS     reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOUBLE_MINUS    reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 137 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)



state 249

    (135) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    ASSIGN          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_PLUS         reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_MINUS        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_TIMES        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_DIV          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_MODULO       reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_SHIFT_LEFT   reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_SHIFT_RIGHT  reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_AMPERSAND    reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_CARET        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ_PIPE         reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_PIPE     reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PIPE            reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CARET           reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AMPERSAND       reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOT_EQ          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS            reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER         reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LESS_EQ         reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GREATER_EQ      reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SHIFT_LEFT      reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SHIFT_RIGHT     reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASTERISK        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV             reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODULO          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LBRACKET        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_PLUS     reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DOUBLE_MINUS    reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 135 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)



state 250

    (161) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 262
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 251

    (49) initializer -> LBRACE initializer_list COMMA . RBRACE
    (51) initializer_list -> initializer_list COMMA . initializer
    (47) initializer -> . assignment_expression
    (48) initializer -> . LBRACE initializer_list RBRACE
    (49) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RBRACE          shift and go to state 264
    LBRACE          shift and go to state 164
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! LBRACE          [ shift and go to state 164 ]

    relational_expression shift and go to state 64
    assignment_expression shift and go to state 163
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    additive_expression shift and go to state 71
    postfix_expression shift and go to state 61
    initializer     shift and go to state 263
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 252

    (48) initializer -> LBRACE initializer_list RBRACE .

    SEMICOLON       reduce using rule 48 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 48 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 48 (initializer -> LBRACE initializer_list RBRACE .)



state 253

    (77) iteration_statement -> FOR LPAREN expression_statement expression_statement . expression RPAREN statement
    (78) iteration_statement -> FOR LPAREN expression_statement expression_statement . RPAREN statement
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    RPAREN          shift and go to state 265
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 266
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 254

    (76) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 267
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 255

    (65) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    TREB_SUPER      reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE_PLUS     reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE_MINUS    reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    AMPERSAND       reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    ASTERISK        reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    TILDE           reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    EXCLAMATION     reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    ID              reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    INUMBER         reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    FNUMBER         reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    CHARACTER       reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 65 (labeled_statement -> CASE constant_expression COLON statement .)



state 256

    (71) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 268
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 257

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN . super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (167) super_input_list -> . parout_expression
    (168) super_input_list -> . super_input_list COMMA parout_expression
    (169) parout_expression -> . super_input_id COLON COLON INUMBER
    (170) parout_expression -> . super_input_id COLON COLON ASTERISK
    (171) parout_expression -> . super_input_id COLON COLON MYTID
    (172) parout_expression -> . super_input_id
    (173) parout_expression -> . super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> . super_input_id COLON COLON LASTTID
    (177) super_input_id -> . ID
    (178) super_input_id -> . LOCAL DOT ID
    (179) super_input_id -> . STARTER DOT ID

    ID              shift and go to state 273
    LOCAL           shift and go to state 272
    STARTER         shift and go to state 271


    super_input_list shift and go to state 270
    parout_expression shift and go to state 269
    super_input_id  shift and go to state 274

state 258

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN . super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (167) super_input_list -> . parout_expression
    (168) super_input_list -> . super_input_list COMMA parout_expression
    (169) parout_expression -> . super_input_id COLON COLON INUMBER
    (170) parout_expression -> . super_input_id COLON COLON ASTERISK
    (171) parout_expression -> . super_input_id COLON COLON MYTID
    (172) parout_expression -> . super_input_id
    (173) parout_expression -> . super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> . super_input_id COLON COLON LASTTID
    (177) super_input_id -> . ID
    (178) super_input_id -> . LOCAL DOT ID
    (179) super_input_id -> . STARTER DOT ID

    ID              shift and go to state 273
    LOCAL           shift and go to state 272
    STARTER         shift and go to state 271


    super_input_list shift and go to state 275
    parout_expression shift and go to state 269
    super_input_id  shift and go to state 274

state 259

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN . super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (167) super_input_list -> . parout_expression
    (168) super_input_list -> . super_input_list COMMA parout_expression
    (169) parout_expression -> . super_input_id COLON COLON INUMBER
    (170) parout_expression -> . super_input_id COLON COLON ASTERISK
    (171) parout_expression -> . super_input_id COLON COLON MYTID
    (172) parout_expression -> . super_input_id
    (173) parout_expression -> . super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> . super_input_id COLON COLON LASTTID
    (177) super_input_id -> . ID
    (178) super_input_id -> . LOCAL DOT ID
    (179) super_input_id -> . STARTER DOT ID

    ID              shift and go to state 273
    LOCAL           shift and go to state 272
    STARTER         shift and go to state 271


    super_input_list shift and go to state 276
    parout_expression shift and go to state 269
    super_input_id  shift and go to state 274

state 260

    (79) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58


    relational_expression shift and go to state 64
    assignment_expression shift and go to state 121
    unary_expression shift and go to state 101
    inclusive_or_expression shift and go to state 59
    exclusive_or_expression shift and go to state 54
    postfix_expression shift and go to state 61
    shift_expression shift and go to state 76
    additive_expression shift and go to state 71
    equality_expression shift and go to state 77
    primary_expression shift and go to state 83
    conditional_expression shift and go to state 123
    mult_expression shift and go to state 81
    cast_expression shift and go to state 66
    logical_and_expression shift and go to state 75
    expression      shift and go to state 277
    logical_or_expression shift and go to state 67
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69

state 261

    (69) selection_statement -> IF LPAREN expression RPAREN . statement
    (70) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 278
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 262

    (161) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 161 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 161 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)



state 263

    (51) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 51 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 51 (initializer_list -> initializer_list COMMA initializer .)



state 264

    (49) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMICOLON       reduce using rule 49 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 49 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 49 (initializer -> LBRACE initializer_list COMMA RBRACE .)



state 265

    (78) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 279
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 266

    (77) iteration_statement -> FOR LPAREN expression_statement expression_statement expression . RPAREN statement
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 280
    COMMA           shift and go to state 185



state 267

    (76) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TREB_SUPER      reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 76 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)



state 268

    (71) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TREB_SUPER      reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 71 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)



state 269

    (167) super_input_list -> parout_expression .

    RPAREN          reduce using rule 167 (super_input_list -> parout_expression .)
    COMMA           reduce using rule 167 (super_input_list -> parout_expression .)



state 270

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list . RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (168) super_input_list -> super_input_list . COMMA parout_expression

    RPAREN          shift and go to state 281
    COMMA           shift and go to state 282



state 271

    (179) super_input_id -> STARTER . DOT ID

    DOT             shift and go to state 283



state 272

    (178) super_input_id -> LOCAL . DOT ID

    DOT             shift and go to state 284



state 273

    (177) super_input_id -> ID .

    COLON           reduce using rule 177 (super_input_id -> ID .)
    RPAREN          reduce using rule 177 (super_input_id -> ID .)
    COMMA           reduce using rule 177 (super_input_id -> ID .)



state 274

    (169) parout_expression -> super_input_id . COLON COLON INUMBER
    (170) parout_expression -> super_input_id . COLON COLON ASTERISK
    (171) parout_expression -> super_input_id . COLON COLON MYTID
    (172) parout_expression -> super_input_id .
    (173) parout_expression -> super_input_id . COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> super_input_id . COLON COLON LASTTID

    COLON           shift and go to state 285
    RPAREN          reduce using rule 172 (parout_expression -> super_input_id .)
    COMMA           reduce using rule 172 (parout_expression -> super_input_id .)

  ! COLON           [ shift and go to state 285 ]
  ! COLON           [ shift and go to state 285 ]
  ! COLON           [ shift and go to state 285 ]
  ! COLON           [ shift and go to state 285 ]


state 275

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list . RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (168) super_input_list -> super_input_list . COMMA parout_expression

    RPAREN          shift and go to state 286
    COMMA           shift and go to state 282



state 276

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list . RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (168) super_input_list -> super_input_list . COMMA parout_expression

    RPAREN          shift and go to state 287
    COMMA           shift and go to state 282



state 277

    (79) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (81) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 288
    COMMA           shift and go to state 185



state 278

    (69) selection_statement -> IF LPAREN expression RPAREN statement .
    (70) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

    RBRACE          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TREB_SUPER      reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AMPERSAND       reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASTERISK        reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FNUMBER         reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHARACTER       reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 289

  ! ELSE            [ reduce using rule 69 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 279

    (78) iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .

    RBRACE          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LBRACE          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SEMICOLON       reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    IF              reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    SWITCH          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    WHILE           reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FOR             reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DO              reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CASE            reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DEFAULT         reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TREB_SUPER      reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    AMPERSAND       reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ASTERISK        reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    PLUS            reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    MINUS           reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    TILDE           reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    EXCLAMATION     reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    RETURN          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    BREAK           reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CONTINUE        reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ID              reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    INUMBER         reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    FNUMBER         reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    CHARACTER       reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    STRING          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    LPAREN          reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)
    ELSE            reduce using rule 78 (iteration_statement -> FOR LPAREN expression_statement expression_statement RPAREN statement .)



state 280

    (77) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 290
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 281

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN . OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    OUTPUT          shift and go to state 291



state 282

    (168) super_input_list -> super_input_list COMMA . parout_expression
    (169) parout_expression -> . super_input_id COLON COLON INUMBER
    (170) parout_expression -> . super_input_id COLON COLON ASTERISK
    (171) parout_expression -> . super_input_id COLON COLON MYTID
    (172) parout_expression -> . super_input_id
    (173) parout_expression -> . super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> . super_input_id COLON COLON LASTTID
    (177) super_input_id -> . ID
    (178) super_input_id -> . LOCAL DOT ID
    (179) super_input_id -> . STARTER DOT ID

    ID              shift and go to state 273
    LOCAL           shift and go to state 272
    STARTER         shift and go to state 271


    parout_expression shift and go to state 292
    super_input_id  shift and go to state 274

state 283

    (179) super_input_id -> STARTER DOT . ID

    ID              shift and go to state 293



state 284

    (178) super_input_id -> LOCAL DOT . ID

    ID              shift and go to state 294



state 285

    (169) parout_expression -> super_input_id COLON . COLON INUMBER
    (170) parout_expression -> super_input_id COLON . COLON ASTERISK
    (171) parout_expression -> super_input_id COLON . COLON MYTID
    (173) parout_expression -> super_input_id COLON . COLON LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> super_input_id COLON . COLON LASTTID

    COLON           shift and go to state 295

  ! COLON           [ shift and go to state 295 ]
  ! COLON           [ shift and go to state 295 ]
  ! COLON           [ shift and go to state 295 ]
  ! COLON           [ shift and go to state 295 ]


state 286

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN . OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    OUTPUT          shift and go to state 296



state 287

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN . OUTPUT LPAREN super_output_list RPAREN SUPERBODY

    OUTPUT          shift and go to state 297



state 288

    (79) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 298



state 289

    (70) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (58) statement -> . labeled_statement
    (59) statement -> . super_statement
    (60) statement -> . compound_statement
    (61) statement -> . expression_statement
    (62) statement -> . selection_statement
    (63) statement -> . iteration_statement
    (64) statement -> . jump_statement
    (65) labeled_statement -> . CASE constant_expression COLON statement
    (66) labeled_statement -> . DEFAULT COLON statement
    (162) super_statement -> . TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (163) super_statement -> . TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (164) super_statement -> . TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY
    (52) compound_statement -> . LBRACE RBRACE
    (53) compound_statement -> . LBRACE statement_list RBRACE
    (54) compound_statement -> . LBRACE declaration_list RBRACE
    (55) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (67) expression_statement -> . SEMICOLON
    (68) expression_statement -> . expression SEMICOLON
    (69) selection_statement -> . IF LPAREN expression RPAREN statement
    (70) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (71) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (76) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (77) iteration_statement -> . FOR LPAREN expression_statement expression_statement expression RPAREN statement
    (78) iteration_statement -> . FOR LPAREN expression_statement expression_statement RPAREN statement
    (79) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (72) jump_statement -> . RETURN SEMICOLON
    (73) jump_statement -> . RETURN expression SEMICOLON
    (74) jump_statement -> . BREAK SEMICOLON
    (75) jump_statement -> . CONTINUE SEMICOLON
    (80) expression -> . assignment_expression
    (81) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . conditional_expression
    (83) assignment_expression -> . unary_expression ASSIGN assignment_expression
    (84) assignment_expression -> . unary_expression EQ_PLUS assignment_expression
    (85) assignment_expression -> . unary_expression EQ_MINUS assignment_expression
    (86) assignment_expression -> . unary_expression EQ_TIMES assignment_expression
    (87) assignment_expression -> . unary_expression EQ_DIV assignment_expression
    (88) assignment_expression -> . unary_expression EQ_MODULO assignment_expression
    (89) assignment_expression -> . unary_expression EQ_SHIFT_LEFT assignment_expression
    (90) assignment_expression -> . unary_expression EQ_SHIFT_RIGHT assignment_expression
    (91) assignment_expression -> . unary_expression EQ_AMPERSAND assignment_expression
    (92) assignment_expression -> . unary_expression EQ_CARET assignment_expression
    (93) assignment_expression -> . unary_expression EQ_PIPE assignment_expression
    (95) conditional_expression -> . logical_or_expression
    (125) unary_expression -> . postfix_expression
    (126) unary_expression -> . DOUBLE_PLUS unary_expression
    (127) unary_expression -> . DOUBLE_MINUS unary_expression
    (128) unary_expression -> . AMPERSAND cast_expression
    (129) unary_expression -> . ASTERISK cast_expression
    (130) unary_expression -> . PLUS cast_expression
    (131) unary_expression -> . MINUS cast_expression
    (132) unary_expression -> . TILDE cast_expression
    (133) unary_expression -> . EXCLAMATION cast_expression
    (96) logical_or_expression -> . logical_and_expression
    (97) logical_or_expression -> . logical_or_expression DOUBLE_PIPE logical_and_expression
    (134) postfix_expression -> . primary_expression
    (135) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (136) postfix_expression -> . postfix_expression LPAREN RPAREN
    (137) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (138) postfix_expression -> . postfix_expression DOUBLE_PLUS
    (139) postfix_expression -> . postfix_expression DOUBLE_MINUS
    (98) logical_and_expression -> . inclusive_or_expression
    (99) logical_and_expression -> . logical_and_expression DOUBLE_AMPERSAND inclusive_or_expression
    (140) primary_expression -> . ID
    (141) primary_expression -> . INUMBER
    (142) primary_expression -> . FNUMBER
    (143) primary_expression -> . CHARACTER
    (144) primary_expression -> . string_literal
    (145) primary_expression -> . LPAREN expression RPAREN
    (100) inclusive_or_expression -> . exclusive_or_expression
    (101) inclusive_or_expression -> . inclusive_or_expression PIPE exclusive_or_expression
    (146) string_literal -> . STRING
    (147) string_literal -> . string_literal STRING
    (102) exclusive_or_expression -> . and_expression
    (103) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (104) and_expression -> . equality_expression
    (105) and_expression -> . and_expression AMPERSAND equality_expression
    (106) equality_expression -> . relational_expression
    (107) equality_expression -> . equality_expression EQ relational_expression
    (108) equality_expression -> . equality_expression NOT_EQ relational_expression
    (109) relational_expression -> . shift_expression
    (110) relational_expression -> . relational_expression LESS shift_expression
    (111) relational_expression -> . relational_expression GREATER shift_expression
    (112) relational_expression -> . relational_expression LESS_EQ shift_expression
    (113) relational_expression -> . relational_expression GREATER_EQ shift_expression
    (114) shift_expression -> . additive_expression
    (115) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (116) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (117) additive_expression -> . mult_expression
    (118) additive_expression -> . additive_expression PLUS mult_expression
    (119) additive_expression -> . additive_expression MINUS mult_expression
    (120) mult_expression -> . cast_expression
    (121) mult_expression -> . mult_expression ASTERISK cast_expression
    (122) mult_expression -> . mult_expression DIV cast_expression
    (123) mult_expression -> . mult_expression MODULO cast_expression
    (124) cast_expression -> . unary_expression

    CASE            shift and go to state 111
    DEFAULT         shift and go to state 109
    TREB_SUPER      shift and go to state 117
    LBRACE          shift and go to state 49
    SEMICOLON       shift and go to state 112
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 110
    FOR             shift and go to state 104
    DO              shift and go to state 119
    RETURN          shift and go to state 100
    BREAK           shift and go to state 118
    CONTINUE        shift and go to state 105
    DOUBLE_PLUS     shift and go to state 73
    DOUBLE_MINUS    shift and go to state 60
    AMPERSAND       shift and go to state 72
    ASTERISK        shift and go to state 70
    PLUS            shift and go to state 63
    MINUS           shift and go to state 56
    TILDE           shift and go to state 65
    EXCLAMATION     shift and go to state 52
    ID              shift and go to state 62
    INUMBER         shift and go to state 79
    FNUMBER         shift and go to state 78
    CHARACTER       shift and go to state 55
    LPAREN          shift and go to state 74
    STRING          shift and go to state 58

  ! TREB_SUPER      [ shift and go to state 117 ]
  ! TREB_SUPER      [ shift and go to state 117 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! LBRACE          [ shift and go to state 49 ]
  ! IF              [ shift and go to state 122 ]
  ! FOR             [ shift and go to state 104 ]
  ! RETURN          [ shift and go to state 100 ]

    expression_statement shift and go to state 95
    unary_expression shift and go to state 101
    exclusive_or_expression shift and go to state 54
    iteration_statement shift and go to state 96
    and_expression  shift and go to state 57
    string_literal  shift and go to state 69
    compound_statement shift and go to state 103
    inclusive_or_expression shift and go to state 59
    selection_statement shift and go to state 120
    postfix_expression shift and go to state 61
    relational_expression shift and go to state 64
    statement       shift and go to state 299
    cast_expression shift and go to state 66
    logical_or_expression shift and go to state 67
    assignment_expression shift and go to state 121
    super_statement shift and go to state 98
    mult_expression shift and go to state 81
    additive_expression shift and go to state 71
    primary_expression shift and go to state 83
    logical_and_expression shift and go to state 75
    shift_expression shift and go to state 76
    equality_expression shift and go to state 77
    jump_statement  shift and go to state 116
    labeled_statement shift and go to state 99
    conditional_expression shift and go to state 123
    expression      shift and go to state 107

state 290

    (77) iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    RBRACE          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LBRACE          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SEMICOLON       reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    IF              reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    SWITCH          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    WHILE           reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FOR             reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DO              reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CASE            reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DEFAULT         reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TREB_SUPER      reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE_PLUS     reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    DOUBLE_MINUS    reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    AMPERSAND       reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ASTERISK        reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    PLUS            reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    MINUS           reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    TILDE           reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    EXCLAMATION     reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    RETURN          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    BREAK           reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CONTINUE        reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ID              reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    INUMBER         reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    FNUMBER         reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    CHARACTER       reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    STRING          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    LPAREN          reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)
    ELSE            reduce using rule 77 (iteration_statement -> FOR LPAREN expression_statement expression_statement expression RPAREN statement .)



state 291

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT . LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 300



state 292

    (168) super_input_list -> super_input_list COMMA parout_expression .

    RPAREN          reduce using rule 168 (super_input_list -> super_input_list COMMA parout_expression .)
    COMMA           reduce using rule 168 (super_input_list -> super_input_list COMMA parout_expression .)



state 293

    (179) super_input_id -> STARTER DOT ID .

    COLON           reduce using rule 179 (super_input_id -> STARTER DOT ID .)
    RPAREN          reduce using rule 179 (super_input_id -> STARTER DOT ID .)
    COMMA           reduce using rule 179 (super_input_id -> STARTER DOT ID .)



state 294

    (178) super_input_id -> LOCAL DOT ID .

    COLON           reduce using rule 178 (super_input_id -> LOCAL DOT ID .)
    RPAREN          reduce using rule 178 (super_input_id -> LOCAL DOT ID .)
    COMMA           reduce using rule 178 (super_input_id -> LOCAL DOT ID .)



state 295

    (169) parout_expression -> super_input_id COLON COLON . INUMBER
    (170) parout_expression -> super_input_id COLON COLON . ASTERISK
    (171) parout_expression -> super_input_id COLON COLON . MYTID
    (173) parout_expression -> super_input_id COLON COLON . LPAREN MYTID mytid_op INUMBER RPAREN
    (174) parout_expression -> super_input_id COLON COLON . LASTTID

    INUMBER         shift and go to state 302
    ASTERISK        shift and go to state 303
    MYTID           shift and go to state 301
    LPAREN          shift and go to state 304
    LASTTID         shift and go to state 305



state 296

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT . LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 306



state 297

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT . LPAREN super_output_list RPAREN SUPERBODY

    LPAREN          shift and go to state 307



state 298

    (79) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TREB_SUPER      reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE_PLUS     reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE_MINUS    reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ASTERISK        reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TILDE           reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FNUMBER         reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    CHARACTER       reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 79 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)



state 299

    (70) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TREB_SUPER      reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE_PLUS     reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE_MINUS    reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSAND       reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASTERISK        reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TILDE           reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXCLAMATION     reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INUMBER         reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FNUMBER         reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHARACTER       reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 70 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)



state 300

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN . super_output_list RPAREN SUPERBODY
    (165) super_output_list -> . ID
    (166) super_output_list -> . super_output_list COMMA ID

    ID              shift and go to state 309


    super_output_list shift and go to state 308

state 301

    (171) parout_expression -> super_input_id COLON COLON MYTID .

    RPAREN          reduce using rule 171 (parout_expression -> super_input_id COLON COLON MYTID .)
    COMMA           reduce using rule 171 (parout_expression -> super_input_id COLON COLON MYTID .)



state 302

    (169) parout_expression -> super_input_id COLON COLON INUMBER .

    RPAREN          reduce using rule 169 (parout_expression -> super_input_id COLON COLON INUMBER .)
    COMMA           reduce using rule 169 (parout_expression -> super_input_id COLON COLON INUMBER .)



state 303

    (170) parout_expression -> super_input_id COLON COLON ASTERISK .

    RPAREN          reduce using rule 170 (parout_expression -> super_input_id COLON COLON ASTERISK .)
    COMMA           reduce using rule 170 (parout_expression -> super_input_id COLON COLON ASTERISK .)



state 304

    (173) parout_expression -> super_input_id COLON COLON LPAREN . MYTID mytid_op INUMBER RPAREN

    MYTID           shift and go to state 310



state 305

    (174) parout_expression -> super_input_id COLON COLON LASTTID .

    RPAREN          reduce using rule 174 (parout_expression -> super_input_id COLON COLON LASTTID .)
    COMMA           reduce using rule 174 (parout_expression -> super_input_id COLON COLON LASTTID .)



state 306

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN . super_output_list RPAREN SUPERBODY
    (165) super_output_list -> . ID
    (166) super_output_list -> . super_output_list COMMA ID

    ID              shift and go to state 309


    super_output_list shift and go to state 311

state 307

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN . super_output_list RPAREN SUPERBODY
    (165) super_output_list -> . ID
    (166) super_output_list -> . super_output_list COMMA ID

    ID              shift and go to state 309


    super_output_list shift and go to state 312

state 308

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list . RPAREN SUPERBODY
    (166) super_output_list -> super_output_list . COMMA ID

    RPAREN          shift and go to state 313
    COMMA           shift and go to state 314



state 309

    (165) super_output_list -> ID .

    RPAREN          reduce using rule 165 (super_output_list -> ID .)
    COMMA           reduce using rule 165 (super_output_list -> ID .)



state 310

    (173) parout_expression -> super_input_id COLON COLON LPAREN MYTID . mytid_op INUMBER RPAREN
    (175) mytid_op -> . PLUS
    (176) mytid_op -> . MINUS

    PLUS            shift and go to state 316
    MINUS           shift and go to state 317


    mytid_op        shift and go to state 315

state 311

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list . RPAREN SUPERBODY
    (166) super_output_list -> super_output_list . COMMA ID

    RPAREN          shift and go to state 318
    COMMA           shift and go to state 314



state 312

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list . RPAREN SUPERBODY
    (166) super_output_list -> super_output_list . COMMA ID

    RPAREN          shift and go to state 319
    COMMA           shift and go to state 314



state 313

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN . SUPERBODY

    SUPERBODY       shift and go to state 320



state 314

    (166) super_output_list -> super_output_list COMMA . ID

    ID              shift and go to state 321



state 315

    (173) parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op . INUMBER RPAREN

    INUMBER         shift and go to state 322



state 316

    (175) mytid_op -> PLUS .

    INUMBER         reduce using rule 175 (mytid_op -> PLUS .)



state 317

    (176) mytid_op -> MINUS .

    INUMBER         reduce using rule 176 (mytid_op -> MINUS .)



state 318

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN . SUPERBODY

    SUPERBODY       shift and go to state 323



state 319

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN . SUPERBODY

    SUPERBODY       shift and go to state 324



state 320

    (164) super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .

    RBRACE          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LBRACE          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SEMICOLON       reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    IF              reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SWITCH          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    WHILE           reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FOR             reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DO              reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CASE            reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DEFAULT         reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TREB_SUPER      reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_PLUS     reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_MINUS    reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    AMPERSAND       reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ASTERISK        reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    PLUS            reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    MINUS           reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TILDE           reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    EXCLAMATION     reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    RETURN          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    BREAK           reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CONTINUE        reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ID              reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    INUMBER         reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FNUMBER         reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CHARACTER       reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    STRING          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LPAREN          reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ELSE            reduce using rule 164 (super_statement -> TREB_SUPER REDUCE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)



state 321

    (166) super_output_list -> super_output_list COMMA ID .

    RPAREN          reduce using rule 166 (super_output_list -> super_output_list COMMA ID .)
    COMMA           reduce using rule 166 (super_output_list -> super_output_list COMMA ID .)



state 322

    (173) parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER . RPAREN

    RPAREN          shift and go to state 325



state 323

    (162) super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .

    RBRACE          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LBRACE          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SEMICOLON       reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    IF              reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SWITCH          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    WHILE           reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FOR             reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DO              reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CASE            reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DEFAULT         reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TREB_SUPER      reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_PLUS     reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_MINUS    reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    AMPERSAND       reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ASTERISK        reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    PLUS            reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    MINUS           reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TILDE           reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    EXCLAMATION     reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    RETURN          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    BREAK           reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CONTINUE        reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ID              reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    INUMBER         reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FNUMBER         reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CHARACTER       reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    STRING          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LPAREN          reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ELSE            reduce using rule 162 (super_statement -> TREB_SUPER SINGLE INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)



state 324

    (163) super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .

    RBRACE          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LBRACE          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SEMICOLON       reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    IF              reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    SWITCH          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    WHILE           reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FOR             reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DO              reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CASE            reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DEFAULT         reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TREB_SUPER      reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_PLUS     reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    DOUBLE_MINUS    reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    AMPERSAND       reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ASTERISK        reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    PLUS            reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    MINUS           reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    TILDE           reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    EXCLAMATION     reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    RETURN          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    BREAK           reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CONTINUE        reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ID              reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    INUMBER         reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    FNUMBER         reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    CHARACTER       reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    STRING          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    LPAREN          reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)
    ELSE            reduce using rule 163 (super_statement -> TREB_SUPER PARALLEL INPUT LPAREN super_input_list RPAREN OUTPUT LPAREN super_output_list RPAREN SUPERBODY .)



state 325

    (173) parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN .

    RPAREN          reduce using rule 173 (parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN .)
    COMMA           reduce using rule 173 (parout_expression -> super_input_id COLON COLON LPAREN MYTID mytid_op INUMBER RPAREN .)


